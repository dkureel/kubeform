/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type CosmosdbMongoCollection struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	Spec              CosmosdbMongoCollectionSpec   `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
	Status            CosmosdbMongoCollectionStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
}

type CosmosdbMongoCollectionSpecIndexes struct {
	Key string `json:"key" tf:"key" protobuf:"bytes,1,opt,name=key"`
	// +optional
	Unique bool `json:"unique,omitempty" tf:"unique,omitempty" protobuf:"varint,2,opt,name=unique"`
}

type CosmosdbMongoCollectionSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-" protobuf:"bytes,1,opt,name=providerRef"`

	ID string `json:"id,omitempty" tf:"id,omitempty" protobuf:"bytes,2,opt,name=id"`

	AccountName  string `json:"accountName" tf:"account_name" protobuf:"bytes,3,opt,name=accountName"`
	DatabaseName string `json:"databaseName" tf:"database_name" protobuf:"bytes,4,opt,name=databaseName"`
	// +optional
	DefaultTtlSeconds int64 `json:"defaultTtlSeconds,omitempty" tf:"default_ttl_seconds,omitempty" protobuf:"varint,5,opt,name=defaultTtlSeconds"`
	// +optional
	Indexes           []CosmosdbMongoCollectionSpecIndexes `json:"indexes,omitempty" tf:"indexes,omitempty" protobuf:"bytes,6,rep,name=indexes"`
	Name              string                               `json:"name" tf:"name" protobuf:"bytes,7,opt,name=name"`
	ResourceGroupName string                               `json:"resourceGroupName" tf:"resource_group_name" protobuf:"bytes,8,opt,name=resourceGroupName"`
	// +optional
	ShardKey string `json:"shardKey,omitempty" tf:"shard_key,omitempty" protobuf:"bytes,9,opt,name=shardKey"`
}

type CosmosdbMongoCollectionStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty" protobuf:"varint,1,opt,name=observedGeneration"`
	// +optional
	Output *CosmosdbMongoCollectionSpec `json:"output,omitempty" protobuf:"bytes,2,opt,name=output"`
	// +optional
	State *base.State `json:"state,omitempty" protobuf:"bytes,3,opt,name=state"`
	// +optional
	Phase base.Phase `json:"phase,omitempty" protobuf:"bytes,4,opt,name=phase,casttype=kubeform.dev/kubeform/apis/base/v1alpha1.Phase"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// CosmosdbMongoCollectionList is a list of CosmosdbMongoCollections
type CosmosdbMongoCollectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	// Items is a list of CosmosdbMongoCollection CRD objects
	Items []CosmosdbMongoCollection `json:"items,omitempty" protobuf:"bytes,2,rep,name=items"`
}
