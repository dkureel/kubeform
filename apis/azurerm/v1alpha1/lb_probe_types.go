/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type LbProbe struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	Spec              LbProbeSpec   `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
	Status            LbProbeStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
}

type LbProbeSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-" protobuf:"bytes,1,opt,name=providerRef"`

	ID string `json:"id,omitempty" tf:"id,omitempty" protobuf:"bytes,2,opt,name=id"`

	// +optional
	IntervalInSeconds int64 `json:"intervalInSeconds,omitempty" tf:"interval_in_seconds,omitempty" protobuf:"varint,3,opt,name=intervalInSeconds"`
	// +optional
	LoadBalancerRules []string `json:"loadBalancerRules,omitempty" tf:"load_balancer_rules,omitempty" protobuf:"bytes,4,rep,name=loadBalancerRules"`
	LoadbalancerID    string   `json:"loadbalancerID" tf:"loadbalancer_id" protobuf:"bytes,5,opt,name=loadbalancerID"`
	// +optional
	// Deprecated
	Location string `json:"location,omitempty" tf:"location,omitempty" protobuf:"bytes,6,opt,name=location"`
	Name     string `json:"name" tf:"name" protobuf:"bytes,7,opt,name=name"`
	// +optional
	NumberOfProbes int64 `json:"numberOfProbes,omitempty" tf:"number_of_probes,omitempty" protobuf:"varint,8,opt,name=numberOfProbes"`
	Port           int64 `json:"port" tf:"port" protobuf:"varint,9,opt,name=port"`
	// +optional
	Protocol string `json:"protocol,omitempty" tf:"protocol,omitempty" protobuf:"bytes,10,opt,name=protocol"`
	// +optional
	RequestPath       string `json:"requestPath,omitempty" tf:"request_path,omitempty" protobuf:"bytes,11,opt,name=requestPath"`
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name" protobuf:"bytes,12,opt,name=resourceGroupName"`
}

type LbProbeStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty" protobuf:"varint,1,opt,name=observedGeneration"`
	// +optional
	Output *LbProbeSpec `json:"output,omitempty" protobuf:"bytes,2,opt,name=output"`
	// +optional
	State *base.State `json:"state,omitempty" protobuf:"bytes,3,opt,name=state"`
	// +optional
	Phase base.Phase `json:"phase,omitempty" protobuf:"bytes,4,opt,name=phase,casttype=kubeform.dev/kubeform/apis/base/v1alpha1.Phase"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// LbProbeList is a list of LbProbes
type LbProbeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	// Items is a list of LbProbe CRD objects
	Items []LbProbe `json:"items,omitempty" protobuf:"bytes,2,rep,name=items"`
}
