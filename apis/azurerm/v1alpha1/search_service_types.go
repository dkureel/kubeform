/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type SearchService struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	Spec              SearchServiceSpec   `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
	Status            SearchServiceStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
}

type SearchServiceSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-" protobuf:"bytes,1,opt,name=providerRef"`

	ID string `json:"id,omitempty" tf:"id,omitempty" protobuf:"bytes,2,opt,name=id"`

	Location string `json:"location" tf:"location" protobuf:"bytes,3,opt,name=location"`
	Name     string `json:"name" tf:"name" protobuf:"bytes,4,opt,name=name"`
	// +optional
	PartitionCount int64 `json:"partitionCount,omitempty" tf:"partition_count,omitempty" protobuf:"varint,5,opt,name=partitionCount"`
	// +optional
	PrimaryKey string `json:"primaryKey,omitempty" tf:"primary_key,omitempty" protobuf:"bytes,6,opt,name=primaryKey"`
	// +optional
	ReplicaCount      int64  `json:"replicaCount,omitempty" tf:"replica_count,omitempty" protobuf:"varint,7,opt,name=replicaCount"`
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name" protobuf:"bytes,8,opt,name=resourceGroupName"`
	// +optional
	SecondaryKey string `json:"secondaryKey,omitempty" tf:"secondary_key,omitempty" protobuf:"bytes,9,opt,name=secondaryKey"`
	Sku          string `json:"sku" tf:"sku" protobuf:"bytes,10,opt,name=sku"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty" protobuf:"bytes,11,rep,name=tags"`
}

type SearchServiceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty" protobuf:"varint,1,opt,name=observedGeneration"`
	// +optional
	Output *SearchServiceSpec `json:"output,omitempty" protobuf:"bytes,2,opt,name=output"`
	// +optional
	State *base.State `json:"state,omitempty" protobuf:"bytes,3,opt,name=state"`
	// +optional
	Phase base.Phase `json:"phase,omitempty" protobuf:"bytes,4,opt,name=phase,casttype=kubeform.dev/kubeform/apis/base/v1alpha1.Phase"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SearchServiceList is a list of SearchServices
type SearchServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	// Items is a list of SearchService CRD objects
	Items []SearchService `json:"items,omitempty" protobuf:"bytes,2,rep,name=items"`
}
