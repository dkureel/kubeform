/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type SqlElasticpool struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	Spec              SqlElasticpoolSpec   `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
	Status            SqlElasticpoolStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
}

type SqlElasticpoolSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-" protobuf:"bytes,1,opt,name=providerRef"`

	ID string `json:"id,omitempty" tf:"id,omitempty" protobuf:"bytes,2,opt,name=id"`

	// +optional
	CreationDate string `json:"creationDate,omitempty" tf:"creation_date,omitempty" protobuf:"bytes,3,opt,name=creationDate"`
	// +optional
	DbDtuMax int64 `json:"dbDtuMax,omitempty" tf:"db_dtu_max,omitempty" protobuf:"varint,4,opt,name=dbDtuMax"`
	// +optional
	DbDtuMin int64  `json:"dbDtuMin,omitempty" tf:"db_dtu_min,omitempty" protobuf:"varint,5,opt,name=dbDtuMin"`
	Dtu      int64  `json:"dtu" tf:"dtu" protobuf:"varint,6,opt,name=dtu"`
	Edition  string `json:"edition" tf:"edition" protobuf:"bytes,7,opt,name=edition"`
	Location string `json:"location" tf:"location" protobuf:"bytes,8,opt,name=location"`
	Name     string `json:"name" tf:"name" protobuf:"bytes,9,opt,name=name"`
	// +optional
	PoolSize          int64  `json:"poolSize,omitempty" tf:"pool_size,omitempty" protobuf:"varint,10,opt,name=poolSize"`
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name" protobuf:"bytes,11,opt,name=resourceGroupName"`
	ServerName        string `json:"serverName" tf:"server_name" protobuf:"bytes,12,opt,name=serverName"`
	// +optional
	Tags map[string]string `json:"tags,omitempty" tf:"tags,omitempty" protobuf:"bytes,13,rep,name=tags"`
}

type SqlElasticpoolStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty" protobuf:"varint,1,opt,name=observedGeneration"`
	// +optional
	Output *SqlElasticpoolSpec `json:"output,omitempty" protobuf:"bytes,2,opt,name=output"`
	// +optional
	State *base.State `json:"state,omitempty" protobuf:"bytes,3,opt,name=state"`
	// +optional
	Phase base.Phase `json:"phase,omitempty" protobuf:"bytes,4,opt,name=phase,casttype=kubeform.dev/kubeform/apis/base/v1alpha1.Phase"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// SqlElasticpoolList is a list of SqlElasticpools
type SqlElasticpoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	// Items is a list of SqlElasticpool CRD objects
	Items []SqlElasticpool `json:"items,omitempty" protobuf:"bytes,2,rep,name=items"`
}
