/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type StorageShare struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	Spec              StorageShareSpec   `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
	Status            StorageShareStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
}

type StorageShareSpecAclAccessPolicy struct {
	Expiry      string `json:"expiry" tf:"expiry" protobuf:"bytes,1,opt,name=expiry"`
	Permissions string `json:"permissions" tf:"permissions" protobuf:"bytes,2,opt,name=permissions"`
	Start       string `json:"start" tf:"start" protobuf:"bytes,3,opt,name=start"`
}

type StorageShareSpecAcl struct {
	// +optional
	AccessPolicy []StorageShareSpecAclAccessPolicy `json:"accessPolicy,omitempty" tf:"access_policy,omitempty" protobuf:"bytes,1,rep,name=accessPolicy"`
	ID           string                            `json:"ID" tf:"id" protobuf:"bytes,2,opt,name=ID"`
}

type StorageShareSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-" protobuf:"bytes,1,opt,name=providerRef"`

	ID string `json:"id,omitempty" tf:"id,omitempty" protobuf:"bytes,2,opt,name=id"`

	// +optional
	Acl []StorageShareSpecAcl `json:"acl,omitempty" tf:"acl,omitempty" protobuf:"bytes,3,rep,name=acl"`
	// +optional
	Metadata map[string]string `json:"metadata,omitempty" tf:"metadata,omitempty" protobuf:"bytes,4,rep,name=metadata"`
	Name     string            `json:"name" tf:"name" protobuf:"bytes,5,opt,name=name"`
	// +optional
	Quota int64 `json:"quota,omitempty" tf:"quota,omitempty" protobuf:"varint,6,opt,name=quota"`
	// +optional
	// Deprecated
	ResourceGroupName  string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty" protobuf:"bytes,7,opt,name=resourceGroupName"`
	StorageAccountName string `json:"storageAccountName" tf:"storage_account_name" protobuf:"bytes,8,opt,name=storageAccountName"`
	// +optional
	Url string `json:"url,omitempty" tf:"url,omitempty" protobuf:"bytes,9,opt,name=url"`
}

type StorageShareStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty" protobuf:"varint,1,opt,name=observedGeneration"`
	// +optional
	Output *StorageShareSpec `json:"output,omitempty" protobuf:"bytes,2,opt,name=output"`
	// +optional
	State *base.State `json:"state,omitempty" protobuf:"bytes,3,opt,name=state"`
	// +optional
	Phase base.Phase `json:"phase,omitempty" protobuf:"bytes,4,opt,name=phase,casttype=kubeform.dev/kubeform/apis/base/v1alpha1.Phase"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StorageShareList is a list of StorageShares
type StorageShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	// Items is a list of StorageShare CRD objects
	Items []StorageShare `json:"items,omitempty" protobuf:"bytes,2,rep,name=items"`
}
