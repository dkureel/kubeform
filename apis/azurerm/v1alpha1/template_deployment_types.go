/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type TemplateDeployment struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	Spec              TemplateDeploymentSpec   `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
	Status            TemplateDeploymentStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
}

type TemplateDeploymentSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-" protobuf:"bytes,1,opt,name=providerRef"`

	ID string `json:"id,omitempty" tf:"id,omitempty" protobuf:"bytes,2,opt,name=id"`

	DeploymentMode string `json:"deploymentMode" tf:"deployment_mode" protobuf:"bytes,3,opt,name=deploymentMode"`
	Name           string `json:"name" tf:"name" protobuf:"bytes,4,opt,name=name"`
	// +optional
	Outputs map[string]string `json:"outputs,omitempty" tf:"outputs,omitempty" protobuf:"bytes,5,rep,name=outputs"`
	// +optional
	Parameters map[string]string `json:"parameters,omitempty" tf:"parameters,omitempty" protobuf:"bytes,6,rep,name=parameters"`
	// +optional
	ParametersBody    string `json:"parametersBody,omitempty" tf:"parameters_body,omitempty" protobuf:"bytes,7,opt,name=parametersBody"`
	ResourceGroupName string `json:"resourceGroupName" tf:"resource_group_name" protobuf:"bytes,8,opt,name=resourceGroupName"`
	// +optional
	TemplateBody string `json:"templateBody,omitempty" tf:"template_body,omitempty" protobuf:"bytes,9,opt,name=templateBody"`
}

type TemplateDeploymentStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty" protobuf:"varint,1,opt,name=observedGeneration"`
	// +optional
	Output *TemplateDeploymentSpec `json:"output,omitempty" protobuf:"bytes,2,opt,name=output"`
	// +optional
	State *base.State `json:"state,omitempty" protobuf:"bytes,3,opt,name=state"`
	// +optional
	Phase base.Phase `json:"phase,omitempty" protobuf:"bytes,4,opt,name=phase,casttype=kubeform.dev/kubeform/apis/base/v1alpha1.Phase"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// TemplateDeploymentList is a list of TemplateDeployments
type TemplateDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	// Items is a list of TemplateDeployment CRD objects
	Items []TemplateDeployment `json:"items,omitempty" protobuf:"bytes,2,rep,name=items"`
}
