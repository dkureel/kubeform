/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type BigtableInstance struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	Spec              BigtableInstanceSpec   `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
	Status            BigtableInstanceStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
}

type BigtableInstanceSpecCluster struct {
	// +optional
	ClusterID string `json:"clusterID,omitempty" tf:"cluster_id,omitempty" protobuf:"bytes,1,opt,name=clusterID"`
	// +optional
	NumNodes int64 `json:"numNodes,omitempty" tf:"num_nodes,omitempty" protobuf:"varint,2,opt,name=numNodes"`
	// +optional
	StorageType string `json:"storageType,omitempty" tf:"storage_type,omitempty" protobuf:"bytes,3,opt,name=storageType"`
	// +optional
	Zone string `json:"zone,omitempty" tf:"zone,omitempty" protobuf:"bytes,4,opt,name=zone"`
}

type BigtableInstanceSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-" protobuf:"bytes,1,opt,name=providerRef"`

	ID string `json:"id,omitempty" tf:"id,omitempty" protobuf:"bytes,2,opt,name=id"`

	// +optional
	// +kubebuilder:validation:MaxItems=1
	Cluster []BigtableInstanceSpecCluster `json:"cluster,omitempty" tf:"cluster,omitempty" protobuf:"bytes,3,rep,name=cluster"`
	// +optional
	// Deprecated
	ClusterID string `json:"clusterID,omitempty" tf:"cluster_id,omitempty" protobuf:"bytes,4,opt,name=clusterID"`
	// +optional
	DisplayName string `json:"displayName,omitempty" tf:"display_name,omitempty" protobuf:"bytes,5,opt,name=displayName"`
	// +optional
	InstanceType string `json:"instanceType,omitempty" tf:"instance_type,omitempty" protobuf:"bytes,6,opt,name=instanceType"`
	Name         string `json:"name" tf:"name" protobuf:"bytes,7,opt,name=name"`
	// +optional
	// Deprecated
	NumNodes int64 `json:"numNodes,omitempty" tf:"num_nodes,omitempty" protobuf:"varint,8,opt,name=numNodes"`
	// +optional
	Project string `json:"project,omitempty" tf:"project,omitempty" protobuf:"bytes,9,opt,name=project"`
	// +optional
	// Deprecated
	StorageType string `json:"storageType,omitempty" tf:"storage_type,omitempty" protobuf:"bytes,10,opt,name=storageType"`
	// +optional
	// Deprecated
	Zone string `json:"zone,omitempty" tf:"zone,omitempty" protobuf:"bytes,11,opt,name=zone"`
}

type BigtableInstanceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty" protobuf:"varint,1,opt,name=observedGeneration"`
	// +optional
	Output *BigtableInstanceSpec `json:"output,omitempty" protobuf:"bytes,2,opt,name=output"`
	// +optional
	State *base.State `json:"state,omitempty" protobuf:"bytes,3,opt,name=state"`
	// +optional
	Phase base.Phase `json:"phase,omitempty" protobuf:"bytes,4,opt,name=phase,casttype=kubeform.dev/kubeform/apis/base/v1alpha1.Phase"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BigtableInstanceList is a list of BigtableInstances
type BigtableInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	// Items is a list of BigtableInstance CRD objects
	Items []BigtableInstance `json:"items,omitempty" protobuf:"bytes,2,rep,name=items"`
}
