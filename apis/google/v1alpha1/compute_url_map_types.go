/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/kubeform/apis/base/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type ComputeURLMap struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	Spec              ComputeURLMapSpec   `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
	Status            ComputeURLMapStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
}

type ComputeURLMapSpecHostRule struct {
	// +optional
	Description string   `json:"description,omitempty" tf:"description,omitempty" protobuf:"bytes,1,opt,name=description"`
	Hosts       []string `json:"hosts" tf:"hosts" protobuf:"bytes,2,rep,name=hosts"`
	PathMatcher string   `json:"pathMatcher" tf:"path_matcher" protobuf:"bytes,3,opt,name=pathMatcher"`
}

type ComputeURLMapSpecPathMatcherPathRule struct {
	Paths   []string `json:"paths" tf:"paths" protobuf:"bytes,1,rep,name=paths"`
	Service string   `json:"service" tf:"service" protobuf:"bytes,2,opt,name=service"`
}

type ComputeURLMapSpecPathMatcher struct {
	DefaultService string `json:"defaultService" tf:"default_service" protobuf:"bytes,1,opt,name=defaultService"`
	// +optional
	Description string `json:"description,omitempty" tf:"description,omitempty" protobuf:"bytes,2,opt,name=description"`
	Name        string `json:"name" tf:"name" protobuf:"bytes,3,opt,name=name"`
	// +optional
	PathRule []ComputeURLMapSpecPathMatcherPathRule `json:"pathRule,omitempty" tf:"path_rule,omitempty" protobuf:"bytes,4,rep,name=pathRule"`
}

type ComputeURLMapSpecTest struct {
	// +optional
	Description string `json:"description,omitempty" tf:"description,omitempty" protobuf:"bytes,1,opt,name=description"`
	Host        string `json:"host" tf:"host" protobuf:"bytes,2,opt,name=host"`
	Path        string `json:"path" tf:"path" protobuf:"bytes,3,opt,name=path"`
	Service     string `json:"service" tf:"service" protobuf:"bytes,4,opt,name=service"`
}

type ComputeURLMapSpec struct {
	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-" protobuf:"bytes,1,opt,name=providerRef"`

	ID string `json:"id,omitempty" tf:"id,omitempty" protobuf:"bytes,2,opt,name=id"`

	DefaultService string `json:"defaultService" tf:"default_service" protobuf:"bytes,3,opt,name=defaultService"`
	// +optional
	Description string `json:"description,omitempty" tf:"description,omitempty" protobuf:"bytes,4,opt,name=description"`
	// +optional
	Fingerprint string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty" protobuf:"bytes,5,opt,name=fingerprint"`
	// +optional
	HostRule []ComputeURLMapSpecHostRule `json:"hostRule,omitempty" tf:"host_rule,omitempty" protobuf:"bytes,6,rep,name=hostRule"`
	// +optional
	MapID string `json:"mapID,omitempty" tf:"map_id,omitempty" protobuf:"bytes,7,opt,name=mapID"`
	Name  string `json:"name" tf:"name" protobuf:"bytes,8,opt,name=name"`
	// +optional
	PathMatcher []ComputeURLMapSpecPathMatcher `json:"pathMatcher,omitempty" tf:"path_matcher,omitempty" protobuf:"bytes,9,rep,name=pathMatcher"`
	// +optional
	Project string `json:"project,omitempty" tf:"project,omitempty" protobuf:"bytes,10,opt,name=project"`
	// +optional
	SelfLink string `json:"selfLink,omitempty" tf:"self_link,omitempty" protobuf:"bytes,11,opt,name=selfLink"`
	// +optional
	Test []ComputeURLMapSpecTest `json:"test,omitempty" tf:"test,omitempty" protobuf:"bytes,12,rep,name=test"`
}

type ComputeURLMapStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty" protobuf:"varint,1,opt,name=observedGeneration"`
	// +optional
	Output *ComputeURLMapSpec `json:"output,omitempty" protobuf:"bytes,2,opt,name=output"`
	// +optional
	State *base.State `json:"state,omitempty" protobuf:"bytes,3,opt,name=state"`
	// +optional
	Phase base.Phase `json:"phase,omitempty" protobuf:"bytes,4,opt,name=phase,casttype=kubeform.dev/kubeform/apis/base/v1alpha1.Phase"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ComputeURLMapList is a list of ComputeURLMaps
type ComputeURLMapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
	// Items is a list of ComputeURLMap CRD objects
	Items []ComputeURLMap `json:"items,omitempty" protobuf:"bytes,2,rep,name=items"`
}
