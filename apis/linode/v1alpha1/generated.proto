/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package kubeform.dev.kubeform.apis.linode.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message State {
  optional int64 version = 1;

  optional string terraform_version = 2;

  optional uint64 serial = 3;

  optional string lineage = 4;
}

message Domain {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DomainSpec spec = 2;

  optional DomainStatus status = 3;
}

// DomainList is a list of Domains
message DomainList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Domain CRD objects
  repeated Domain items = 2;
}

message DomainRecord {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DomainRecordSpec spec = 2;

  optional DomainRecordStatus status = 3;
}

// DomainRecordList is a list of DomainRecords
message DomainRecordList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of DomainRecord CRD objects
  repeated DomainRecord items = 2;
}

message DomainRecordSpec {
  optional k8s.io.api.core.v1.LocalObjectReference providerRef = 1;

  optional string id = 2;

  // The ID of the Domain to access.
  optional int64 domainID = 3;

  // The name of this Record. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the subdomain being associated with an IP address.
  optional string name = 4;

  // The port this Record points to.
  // +optional
  optional int64 port = 5;

  // The priority of the target host. Lower values are preferred.
  // +optional
  optional int64 priority = 6;

  // The protocol this Record's service communicates with. Only valid for SRV records.
  // +optional
  optional string protocol = 7;

  // The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address.
  optional string recordType = 8;

  // The service this Record identified. Only valid for SRV records.
  // +optional
  optional string service = 9;

  // The tag portion of a CAA record. It is invalid to set this on other record types.
  // +optional
  optional string tag = 10;

  // The target for this Record. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.
  optional string target = 11;

  // 'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
  // +optional
  optional int64 ttlSec = 12;

  // The relative weight of this Record. Higher values are preferred.
  // +optional
  optional int64 weight = 13;
}

message DomainRecordStatus {
  // Resource generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // +optional
  optional DomainRecordSpec output = 2;

  // +optional
  optional State state = 3;

  // +optional
  optional string phase = 4;
}

message DomainSpec {
  optional k8s.io.api.core.v1.LocalObjectReference providerRef = 1;

  optional string id = 2;

  // The list of IPs that may perform a zone transfer for this Domain. This is potentially dangerous, and should be set to an empty list unless you intend to use it.
  // +optional
  repeated string axfrIPS = 3;

  // A description for this Domain. This is for display purposes only.
  // +optional
  optional string description = 4;

  // The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain.
  optional string domain = 5;

  // The amount of time in seconds that may pass before this Domain is no longer authoritative. Valid values are 0, 00, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
  // +optional
  optional int64 expireSec = 6;

  // The group this Domain belongs to. This is for display purposes only.
  // +optional
  optional string group = 7;

  // The IP addresses representing the master DNS for this Domain.
  // +optional
  repeated string masterIPS = 8;

  // The amount of time in seconds before this Domain should be refreshed. Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
  // +optional
  optional int64 refreshSec = 9;

  // The interval, in seconds, at which a failed refresh should be retried. Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
  // +optional
  optional int64 retrySec = 10;

  // Start of Authority email address. This is required for master Domains.
  // +optional
  optional string soaEmail = 11;

  // Used to control whether this Domain is currently being rendered.
  // +optional
  optional string status = 12;

  // An array of tags applied to this object. Tags are for organizational purposes only.
  // +optional
  repeated string tags = 13;

  // 'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 0, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
  // +optional
  optional int64 ttlSec = 14;

  // If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave).
  optional string type = 15;
}

message DomainStatus {
  // Resource generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // +optional
  optional DomainSpec output = 2;

  // +optional
  optional State state = 3;

  // +optional
  optional string phase = 4;
}

message Image {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ImageSpec spec = 2;

  optional ImageStatus status = 3;
}

// ImageList is a list of Images
message ImageList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Image CRD objects
  repeated Image items = 2;
}

message ImageSpec {
  optional k8s.io.api.core.v1.LocalObjectReference providerRef = 1;

  optional string id = 2;

  // When this Image was created.
  // +optional
  optional string created = 3;

  // The name of the User who created this Image.
  // +optional
  optional string createdBy = 4;

  // Whether or not this Image is deprecated. Will only be True for deprecated public Images.
  // +optional
  optional bool deprecated = 5;

  // A detailed description of this Image.
  // +optional
  optional string description = 6;

  // The ID of the Linode Disk that this Image will be created from.
  optional int64 diskID = 7;

  // Only Images created automatically (from a deleted Linode; type=automatic) will expire.
  // +optional
  optional string expiry = 8;

  // True if the Image is public.
  // +optional
  optional bool isPublic = 9;

  // A short description of the Image. Labels cannot contain special characters.
  optional string label = 10;

  // The ID of the Linode that this Image will be created from.
  optional int64 linodeID = 11;

  // The minimum size this Image needs to deploy. Size is in MB.
  // +optional
  optional int64 size = 12;

  // How the Image was created. 'Manual' Images can be created at any time. 'Automatic' images are created automatically from a deleted Linode.
  // +optional
  optional string type = 13;

  // The upstream distribution vendor. Nil for private Images.
  // +optional
  optional string vendor = 14;
}

message ImageStatus {
  // Resource generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // +optional
  optional ImageSpec output = 2;

  // +optional
  optional State state = 3;

  // +optional
  optional string phase = 4;
}

message Instance {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional InstanceSpec spec = 2;

  optional InstanceStatus status = 3;
}

// InstanceList is a list of Instances
message InstanceList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Instance CRD objects
  repeated Instance items = 2;
}

message InstanceSpec {
  optional k8s.io.api.core.v1.LocalObjectReference providerRef = 1;

  optional string id = 2;

  optional k8s.io.api.core.v1.LocalObjectReference secretRef = 3;

  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecAlerts alerts = 4;

  // A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if 'image' is provided.
  // +optional
  repeated string authorizedKeys = 5;

  // A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. Only accepted if 'image' is provided.
  // +optional
  repeated string authorizedUsers = 6;

  // A Backup ID from another Linode's available backups. Your User must have read_write access to that Linode, the Backup must have a status of successful, and the Linode must be deployed to the same region as the Backup. See /linode/instances/{linodeId}/backups for a Linode's available backups. This field and the image field are mutually exclusive.
  // +optional
  optional int64 backupID = 7;

  // Information about this Linode's backups status.
  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecBackups backups = 8;

  // If this field is set to true, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.
  // +optional
  optional bool backupsEnabled = 9;

  // The Label of the Instance Config that should be used to boot the Linode instance.
  // +optional
  optional string bootConfigLabel = 10;

  // Configuration profiles define the VM settings and boot behavior of the Linode Instance.
  // +optional
  repeated InstanceSpecConfig config = 11;

  // +optional
  repeated InstanceSpecDisk disk = 12;

  // The display group of the Linode instance.
  // +optional
  optional string group = 13;

  // An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/. See /images for more information on the Images available for you to use.
  // +optional
  optional string image = 14;

  // This Linode's Public IPv4 Address. If there are multiple public IPv4 addresses on this Instance, an arbitrary address will be used for this field.
  // +optional
  optional string ipAddress = 15;

  // This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.
  // +optional
  repeated string ipv4 = 16;

  // This Linode's IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.
  // +optional
  optional string ipv6 = 17;

  // The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned
  // +optional
  optional string label = 18;

  // If true, the created Linode will have private networking enabled, allowing use of the 192.168.128.0/17 network within the Linode's region.
  // +optional
  optional bool privateIP = 19;

  // This Linode's Private IPv4 Address.  The regional private IP address range is 192.168.128/17 address shared by all Linode Instances in a region.
  // +optional
  optional string privateIPAddress = 20;

  // This is the location where the Linode was deployed. This cannot be changed without opening a support ticket.
  optional string region = 21;

  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecSpecs specs = 22;

  // The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript.
  // +optional
  optional int64 stackscriptID = 23;

  // The status of the instance, indicating the current readiness state.
  // +optional
  optional string status = 24;

  // When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
  // +optional
  optional int64 swapSize = 25;

  // An array of tags applied to this object. Tags are for organizational purposes only.
  // +optional
  repeated string tags = 26;

  // The type of instance to be deployed, determining the price and size.
  // +optional
  optional string type = 27;

  // The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
  // +optional
  optional bool watchdogEnabled = 28;
}

message InstanceSpecAlerts {
  // The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we'll send you an alert. If this is set to 0, the alert is disabled.
  // +optional
  optional int64 cpu = 1;

  // The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to 0, this alert is disabled.
  // +optional
  optional int64 io = 2;

  // The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.
  // +optional
  optional int64 networkIn = 3;

  // The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.
  // +optional
  optional int64 networkOut = 4;

  // The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to 0 (zero), the alert is disabled.
  // +optional
  optional int64 transferQuota = 5;
}

message InstanceSpecBackups {
  // If this Linode has the Backup service enabled.
  // +optional
  optional bool enabled = 1;

  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecBackupsSchedule schedule = 2;
}

message InstanceSpecBackupsSchedule {
  // The day ('Sunday'-'Saturday') of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as 'Scheduling' until the day is automatically selected.
  // +optional
  optional string day = 1;

  // The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.
  // +optional
  optional string window = 2;
}

message InstanceSpecConfig {
  // Optional field for arbitrary User comments on this Config.
  // +optional
  optional string comments = 1;

  // Device sda-sdh can be either a Disk or Volume identified by disk_label or volume_id. Only one type per slot allowed.
  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecConfigDevices devices = 2;

  // Helpers enabled when booting to this Linode Config.
  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecConfigHelpers helpers = 3;

  // A Kernel ID to boot a Linode with. Default is based on image choice. (examples: linode/latest-64bit, linode/grub2, linode/direct-disk)
  // +optional
  optional string kernel = 4;

  // The Config's label for display purposes.  Also used by `boot_config_label`.
  optional string label = 5;

  // Defaults to the total RAM of the Linode
  // +optional
  optional int64 memoryLimit = 6;

  // The root device to boot. The corresponding disk must be attached.
  // +optional
  optional string rootDevice = 7;

  // Defines the state of your Linode after booting. Defaults to default.
  // +optional
  optional string runLevel = 8;

  // Controls the virtualization mode. Defaults to paravirt.
  // +optional
  optional string virtMode = 9;
}

message InstanceSpecConfigDevices {
  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecConfigDevicesSda sda = 1;

  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecConfigDevicesSdb sdb = 2;

  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecConfigDevicesSdc sdc = 3;

  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecConfigDevicesSdd sdd = 4;

  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecConfigDevicesSde sde = 5;

  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecConfigDevicesSdf sdf = 6;

  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecConfigDevicesSdg sdg = 7;

  // +optional
  // +kubebuilder:validation:MaxItems=1
  repeated InstanceSpecConfigDevicesSdh sdh = 8;
}

message InstanceSpecConfigDevicesSda {
  // The Disk ID to map to this disk slot
  // +optional
  optional int64 diskID = 1;

  // The `label` of the `disk` to map to this `device` slot.
  // +optional
  optional string diskLabel = 2;

  // The Block Storage volume ID to map to this disk slot
  // +optional
  optional int64 volumeID = 3;
}

message InstanceSpecConfigDevicesSdb {
  // +optional
  optional int64 diskID = 1;

  // +optional
  optional string diskLabel = 2;

  // +optional
  optional int64 volumeID = 3;
}

message InstanceSpecConfigDevicesSdc {
  // +optional
  optional int64 diskID = 1;

  // +optional
  optional string diskLabel = 2;

  // +optional
  optional int64 volumeID = 3;
}

message InstanceSpecConfigDevicesSdd {
  // +optional
  optional int64 diskID = 1;

  // +optional
  optional string diskLabel = 2;

  // +optional
  optional int64 volumeID = 3;
}

message InstanceSpecConfigDevicesSde {
  // +optional
  optional int64 diskID = 1;

  // +optional
  optional string diskLabel = 2;

  // +optional
  optional int64 volumeID = 3;
}

message InstanceSpecConfigDevicesSdf {
  // +optional
  optional int64 diskID = 1;

  // +optional
  optional string diskLabel = 2;

  // +optional
  optional int64 volumeID = 3;
}

message InstanceSpecConfigDevicesSdg {
  // +optional
  optional int64 diskID = 1;

  // +optional
  optional string diskLabel = 2;

  // +optional
  optional int64 volumeID = 3;
}

message InstanceSpecConfigDevicesSdh {
  // +optional
  optional int64 diskID = 1;

  // +optional
  optional string diskLabel = 2;

  // +optional
  optional int64 volumeID = 3;
}

message InstanceSpecConfigHelpers {
  // Populates the /dev directory early during boot without udev. Defaults to false.
  // +optional
  optional bool devtmpfsAutomount = 1;

  // Controls the behavior of the Linode Config's Distribution Helper setting.
  // +optional
  optional bool distro = 2;

  // Creates a modules dependency file for the Kernel you run.
  // +optional
  optional bool modulesDep = 3;

  // Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
  // +optional
  optional bool network = 4;

  // Disables updatedb cron job to avoid disk thrashing.
  // +optional
  optional bool updatedbDisabled = 5;
}

message InstanceSpecDisk {
  // A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if 'image' is provided.
  // +optional
  repeated string authorizedKeys = 1;

  // A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. Only accepted if 'image' is provided.
  // +optional
  repeated string authorizedUsers = 2;

  // The Disk filesystem can be one of: raw, swap, ext3, ext4, initrd (max 32mb)
  // +optional
  optional string filesystem = 3;

  // The ID of the Disk (for use in Linode Image resources and Linode Instance Config Devices)
  // +optional
  optional int64 ID = 4;

  // An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/.
  // +optional
  optional string image = 5;

  // The disks label, which acts as an identifier in Terraform.
  optional string label = 6;

  // If true, this Disk is read-only.
  // +optional
  optional bool readOnly = 7;

  // The size of the Disk in MB.
  optional int64 size = 8;

  // The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript.
  // +optional
  optional int64 stackscriptID = 9;
}

message InstanceSpecSpecs {
  // The amount of storage space, in GB. this Linode has access to. A typical Linode will divide this space between a primary disk with an image deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an image without specifying disks.
  // +optional
  optional int64 disk = 1;

  // The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile.
  // +optional
  optional int64 memory = 2;

  // The amount of network transfer this Linode is allotted each month.
  // +optional
  optional int64 transfer = 3;

  // The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile.
  // +optional
  optional int64 vcpus = 4;
}

message InstanceStatus {
  // Resource generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // +optional
  optional InstanceSpec output = 2;

  // +optional
  optional State state = 3;

  // +optional
  optional string phase = 4;
}

message Nodebalancer {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodebalancerSpec spec = 2;

  optional NodebalancerStatus status = 3;
}

message NodebalancerConfig {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodebalancerConfigSpec spec = 2;

  optional NodebalancerConfigStatus status = 3;
}

// NodebalancerConfigList is a list of NodebalancerConfigs
message NodebalancerConfigList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of NodebalancerConfig CRD objects
  repeated NodebalancerConfig items = 2;
}

message NodebalancerConfigSpec {
  optional k8s.io.api.core.v1.LocalObjectReference providerRef = 1;

  optional string id = 2;

  optional k8s.io.api.core.v1.LocalObjectReference secretRef = 3;

  // What algorithm this NodeBalancer should use for routing traffic to backends: roundrobin, leastconn, source
  // +optional
  optional string algorithm = 4;

  // The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected.
  // +optional
  optional string check = 5;

  // How many times to attempt a check before considering a backend to be down. (1-30)
  // +optional
  optional int64 checkAttempts = 6;

  // This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down
  // +optional
  optional string checkBody = 7;

  // How often, in seconds, to check that backends are up and serving requests.
  // +optional
  optional int64 checkInterval = 8;

  // If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
  // +optional
  optional bool checkPassive = 9;

  // The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
  // +optional
  optional string checkPath = 10;

  // How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
  // +optional
  optional int64 checkTimeout = 11;

  // What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.
  // +optional
  optional string cipherSuite = 12;

  // +optional
  map<string, NodebalancerConfigSpecNodeStatus> nodeStatus = 13;

  // The ID of the NodeBalancer to access.
  optional int64 nodebalancerID = 14;

  // The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
  // +optional
  optional int64 port = 15;

  // The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key.
  // +optional
  optional string protocol = 16;

  // The certificate this port is serving. This is not returned. If set, this field will come back as `<REDACTED>`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
  // +optional
  optional string sslCert = 17;

  // The common name for the SSL certification this port is serving if this port is not configured to use SSL.
  // +optional
  optional string sslCommonname = 18;

  // The fingerprint for the SSL certification this port is serving if this port is not configured to use SSL.
  // +optional
  optional string sslFingerprint = 19;

  // Controls how session stickiness is handled on this port: 'none', 'table', 'http_cookie'
  // +optional
  optional string stickiness = 20;
}

message NodebalancerConfigSpecNodeStatus {
  // The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.
  // +optional
  optional int64 statusDown = 1;

  // The number of backends considered to be 'UP' and healthy, and that are serving requests.
  // +optional
  optional int64 statusUp = 2;
}

message NodebalancerConfigStatus {
  // Resource generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // +optional
  optional NodebalancerConfigSpec output = 2;

  // +optional
  optional State state = 3;

  // +optional
  optional string phase = 4;
}

// NodebalancerList is a list of Nodebalancers
message NodebalancerList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Nodebalancer CRD objects
  repeated Nodebalancer items = 2;
}

message NodebalancerNode {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodebalancerNodeSpec spec = 2;

  optional NodebalancerNodeStatus status = 3;
}

// NodebalancerNodeList is a list of NodebalancerNodes
message NodebalancerNodeList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of NodebalancerNode CRD objects
  repeated NodebalancerNode items = 2;
}

message NodebalancerNodeSpec {
  optional k8s.io.api.core.v1.LocalObjectReference providerRef = 1;

  optional string id = 2;

  // The private IP Address and port (IP:PORT) where this backend can be reached. This must be a private IP address.
  optional string address = 3;

  // The ID of the NodeBalancerConfig to access.
  optional int64 configID = 4;

  // The label for this node. This is for display purposes only.
  optional string label = 5;

  // The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it.
  // +optional
  optional string mode = 6;

  // The ID of the NodeBalancer to access.
  optional int64 nodebalancerID = 7;

  // The current status of this node, based on the configured checks of its NodeBalancer Config. (unknown, UP, DOWN)
  // +optional
  optional string status = 8;

  // Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255)
  // +optional
  optional int64 weight = 9;
}

message NodebalancerNodeStatus {
  // Resource generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // +optional
  optional NodebalancerNodeSpec output = 2;

  // +optional
  optional State state = 3;

  // +optional
  optional string phase = 4;
}

message NodebalancerSpec {
  optional k8s.io.api.core.v1.LocalObjectReference providerRef = 1;

  optional string id = 2;

  // Throttle connections per second (0-20). Set to 0 (zero) to disable throttling.
  // +optional
  optional int64 clientConnThrottle = 3;

  // +optional
  optional string created = 4;

  // This NodeBalancer's hostname, ending with .nodebalancer.linode.com
  // +optional
  optional string hostname = 5;

  // The Public IPv4 Address of this NodeBalancer
  // +optional
  optional string ipv4 = 6;

  // The Public IPv6 Address of this NodeBalancer
  // +optional
  optional string ipv6 = 7;

  // The label of the Linode NodeBalancer.
  // +optional
  optional string label = 8;

  // The region where this NodeBalancer will be deployed.
  optional string region = 9;

  // An array of tags applied to this object. Tags are for organizational purposes only.
  // +optional
  repeated string tags = 10;

  // +optional
  map<string, NodebalancerSpecTransfer> transfer = 11;

  // +optional
  optional string updated = 12;
}

message NodebalancerSpecTransfer {
  // The total transfer, in MB, used by this NodeBalancer this month
  // +optional
  optional double in = 1;

  // The total inbound transfer, in MB, used for this NodeBalancer this month
  // +optional
  optional double out = 2;

  // The total outbound transfer, in MB, used for this NodeBalancer this month
  // +optional
  optional double total = 3;
}

message NodebalancerStatus {
  // Resource generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // +optional
  optional NodebalancerSpec output = 2;

  // +optional
  optional State state = 3;

  // +optional
  optional string phase = 4;
}

message Rdns {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RdnsSpec spec = 2;

  optional RdnsStatus status = 3;
}

// RdnsList is a list of Rdnss
message RdnsList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Rdns CRD objects
  repeated Rdns items = 2;
}

message RdnsSpec {
  optional k8s.io.api.core.v1.LocalObjectReference providerRef = 1;

  optional string id = 2;

  // The public Linode IPv4 or IPv6 address to operate on.
  optional string address = 3;

  // The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
  optional string rdns = 4;
}

message RdnsStatus {
  // Resource generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // +optional
  optional RdnsSpec output = 2;

  // +optional
  optional State state = 3;

  // +optional
  optional string phase = 4;
}

message Sshkey {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SshkeySpec spec = 2;

  optional SshkeyStatus status = 3;
}

// SshkeyList is a list of Sshkeys
message SshkeyList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Sshkey CRD objects
  repeated Sshkey items = 2;
}

message SshkeySpec {
  optional k8s.io.api.core.v1.LocalObjectReference providerRef = 1;

  optional string id = 2;

  // The date this key was added.
  // +optional
  optional string created = 3;

  // The label of the Linode SSH Key.
  optional string label = 4;

  // The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.
  optional string sshKey = 5;
}

message SshkeyStatus {
  // Resource generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // +optional
  optional SshkeySpec output = 2;

  // +optional
  optional State state = 3;

  // +optional
  optional string phase = 4;
}

message Stackscript {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional StackscriptSpec spec = 2;

  optional StackscriptStatus status = 3;
}

// StackscriptList is a list of Stackscripts
message StackscriptList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Stackscript CRD objects
  repeated Stackscript items = 2;
}

message StackscriptSpec {
  optional k8s.io.api.core.v1.LocalObjectReference providerRef = 1;

  optional string id = 2;

  // The date this StackScript was created.
  // +optional
  optional string created = 3;

  // Count of currently active, deployed Linodes created from this StackScript.
  // +optional
  optional int64 deploymentsActive = 4;

  // The total number of times this StackScript has been deployed.
  // +optional
  optional int64 deploymentsTotal = 5;

  // A description for the StackScript.
  optional string description = 6;

  // An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
  repeated string images = 7;

  // This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
  // +optional
  optional bool isPublic = 8;

  // The StackScript's label is for display purposes only.
  optional string label = 9;

  // This field allows you to add notes for the set of revisions made to this StackScript.
  // +optional
  optional string revNote = 10;

  // The script to execute when provisioning a new Linode with this StackScript.
  optional string script = 11;

  // The date this StackScript was updated.
  // +optional
  optional string updated = 12;

  // This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
  // +optional
  repeated StackscriptSpecUserDefinedFields userDefinedFields = 13;

  // The Gravatar ID for the User who created the StackScript.
  // +optional
  optional string userGravatarID = 14;

  // The User who created the StackScript.
  // +optional
  optional string username = 15;
}

message StackscriptSpecUserDefinedFields {
  // +optional
  optional string default = 1;

  // +optional
  optional string example = 2;

  // +optional
  optional string label = 3;

  // +optional
  optional string manyOf = 4;

  // +optional
  optional string name = 5;

  // +optional
  optional string oneOf = 6;
}

message StackscriptStatus {
  // Resource generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // +optional
  optional StackscriptSpec output = 2;

  // +optional
  optional State state = 3;

  // +optional
  optional string phase = 4;
}

message Token {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional TokenSpec spec = 2;

  optional TokenStatus status = 3;
}

// TokenList is a list of Tokens
message TokenList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Token CRD objects
  repeated Token items = 2;
}

message TokenSpec {
  optional k8s.io.api.core.v1.LocalObjectReference providerRef = 1;

  optional string id = 2;

  // The date and time this token was created.
  // +optional
  optional string created = 3;

  // When this token will expire. Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated. Tokens may be created with 'null' as their expiry and will never expire unless revoked.
  // +optional
  optional string expiry = 4;

  // The label of the Linode Token.
  // +optional
  optional string label = 5;

  // The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the Linode CLI, require tokens with access to *. Tokens with more restrictive scopes are generally more secure.
  optional string scopes = 6;

  // The token used to access the API.
  // +optional
  optional string token = 7;
}

message TokenStatus {
  // Resource generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // +optional
  optional TokenSpec output = 2;

  // +optional
  optional State state = 3;

  // +optional
  optional string phase = 4;
}

message Volume {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VolumeSpec spec = 2;

  optional VolumeStatus status = 3;
}

// VolumeList is a list of Volumes
message VolumeList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Volume CRD objects
  repeated Volume items = 2;
}

message VolumeSpec {
  optional k8s.io.api.core.v1.LocalObjectReference providerRef = 1;

  optional string id = 2;

  // The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0Linode_Volume_ + Volume label.
  // +optional
  optional string filesystemPath = 3;

  // The label of the Linode Volume.
  optional string label = 4;

  // The Linode ID where the Volume should be attached.
  // +optional
  optional int64 linodeID = 5;

  // The region where this volume will be deployed.
  optional string region = 6;

  // Size of the Volume in GB
  // +optional
  optional int64 size = 7;

  // The status of the volume, indicating the current readiness state.
  // +optional
  optional string status = 8;

  // An array of tags applied to this object. Tags are for organizational purposes only.
  // +optional
  repeated string tags = 9;
}

message VolumeStatus {
  // Resource generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // +optional
  optional VolumeSpec output = 2;

  // +optional
  optional State state = 3;

  // +optional
  optional string phase = 4;
}

