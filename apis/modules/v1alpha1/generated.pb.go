/*
Copyright The Kubeform Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kubeform.dev/kubeform/apis/modules/v1alpha1/generated.proto

/*
	Package v1alpha1 is a generated protocol buffer package.

	It is generated from these files:
		kubeform.dev/kubeform/apis/modules/v1alpha1/generated.proto

	It has these top-level messages:
		GoogleServiceAccount
		GoogleServiceAccountList
		GoogleServiceAccountOutput
		GoogleServiceAccountSpec
		GoogleServiceAccountStatus
		RDS
		RDSList
		RDSOutput
		RDSSpec
		RDSStatus
*/
package v1alpha1

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	k8s_io_api_core_v1 "k8s.io/api/core/v1"

	kubeform_dev_kubeform_apis_base_v1alpha1 "kubeform.dev/kubeform/apis/base/v1alpha1"

	encoding_json "encoding/json"

	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

	strings "strings"

	reflect "reflect"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func (m *GoogleServiceAccount) Reset()                    { *m = GoogleServiceAccount{} }
func (*GoogleServiceAccount) ProtoMessage()               {}
func (*GoogleServiceAccount) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{0} }

func (m *GoogleServiceAccountList) Reset()      { *m = GoogleServiceAccountList{} }
func (*GoogleServiceAccountList) ProtoMessage() {}
func (*GoogleServiceAccountList) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{1}
}

func (m *GoogleServiceAccountOutput) Reset()      { *m = GoogleServiceAccountOutput{} }
func (*GoogleServiceAccountOutput) ProtoMessage() {}
func (*GoogleServiceAccountOutput) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{2}
}

func (m *GoogleServiceAccountSpec) Reset()      { *m = GoogleServiceAccountSpec{} }
func (*GoogleServiceAccountSpec) ProtoMessage() {}
func (*GoogleServiceAccountSpec) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{3}
}

func (m *GoogleServiceAccountStatus) Reset()      { *m = GoogleServiceAccountStatus{} }
func (*GoogleServiceAccountStatus) ProtoMessage() {}
func (*GoogleServiceAccountStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{4}
}

func (m *RDS) Reset()                    { *m = RDS{} }
func (*RDS) ProtoMessage()               {}
func (*RDS) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{5} }

func (m *RDSList) Reset()                    { *m = RDSList{} }
func (*RDSList) ProtoMessage()               {}
func (*RDSList) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{6} }

func (m *RDSOutput) Reset()                    { *m = RDSOutput{} }
func (*RDSOutput) ProtoMessage()               {}
func (*RDSOutput) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{7} }

func (m *RDSSpec) Reset()                    { *m = RDSSpec{} }
func (*RDSSpec) ProtoMessage()               {}
func (*RDSSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{8} }

func (m *RDSStatus) Reset()                    { *m = RDSStatus{} }
func (*RDSStatus) ProtoMessage()               {}
func (*RDSStatus) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{9} }

func init() {
	proto.RegisterType((*GoogleServiceAccount)(nil), "kubeform.dev.kubeform.apis.modules.v1alpha1.GoogleServiceAccount")
	proto.RegisterType((*GoogleServiceAccountList)(nil), "kubeform.dev.kubeform.apis.modules.v1alpha1.GoogleServiceAccountList")
	proto.RegisterType((*GoogleServiceAccountOutput)(nil), "kubeform.dev.kubeform.apis.modules.v1alpha1.GoogleServiceAccountOutput")
	proto.RegisterType((*GoogleServiceAccountSpec)(nil), "kubeform.dev.kubeform.apis.modules.v1alpha1.GoogleServiceAccountSpec")
	proto.RegisterType((*GoogleServiceAccountStatus)(nil), "kubeform.dev.kubeform.apis.modules.v1alpha1.GoogleServiceAccountStatus")
	proto.RegisterType((*RDS)(nil), "kubeform.dev.kubeform.apis.modules.v1alpha1.RDS")
	proto.RegisterType((*RDSList)(nil), "kubeform.dev.kubeform.apis.modules.v1alpha1.RDSList")
	proto.RegisterType((*RDSOutput)(nil), "kubeform.dev.kubeform.apis.modules.v1alpha1.RDSOutput")
	proto.RegisterType((*RDSSpec)(nil), "kubeform.dev.kubeform.apis.modules.v1alpha1.RDSSpec")
	proto.RegisterType((*RDSStatus)(nil), "kubeform.dev.kubeform.apis.modules.v1alpha1.RDSStatus")
}
func (m *GoogleServiceAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleServiceAccount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObjectMeta.Size()))
	n1, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Spec.Size()))
	n2, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Status.Size()))
	n3, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *GoogleServiceAccountList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleServiceAccountList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ListMeta.Size()))
	n4, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GoogleServiceAccountOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleServiceAccountOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Email)))
	i += copy(dAtA[i:], m.Email)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Emails)))
	i += copy(dAtA[i:], m.Emails)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.EmailsList)))
	i += copy(dAtA[i:], m.EmailsList)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IamEmail)))
	i += copy(dAtA[i:], m.IamEmail)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IamEmails)))
	i += copy(dAtA[i:], m.IamEmails)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IamEmailsList)))
	i += copy(dAtA[i:], m.IamEmailsList)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	dAtA[i] = 0x42
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Keys)))
	i += copy(dAtA[i:], m.Keys)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceAccount)))
	i += copy(dAtA[i:], m.ServiceAccount)
	dAtA[i] = 0x52
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceAccounts)))
	i += copy(dAtA[i:], m.ServiceAccounts)
	return i, nil
}

func (m *GoogleServiceAccountSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleServiceAccountSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SecretRef != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.SecretRef.Size()))
		n5, err := m.SecretRef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ProviderRef.Size()))
	n6, err := m.ProviderRef.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Source)))
	i += copy(dAtA[i:], m.Source)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BillingAccountID)))
	i += copy(dAtA[i:], m.BillingAccountID)
	dAtA[i] = 0x28
	i++
	if m.GenerateKeys {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x30
	i++
	if m.GrantBillingRole {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x38
	i++
	if m.GrantXpnRoles {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.OrgID)))
	i += copy(dAtA[i:], m.OrgID)
	dAtA[i] = 0x52
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Prefix)))
	i += copy(dAtA[i:], m.Prefix)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProjectID)))
	i += copy(dAtA[i:], m.ProjectID)
	if len(m.ProjectRoles) > 0 {
		for _, s := range m.ProjectRoles {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GoogleServiceAccountStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleServiceAccountStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	if m.Output != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Output.Size()))
		n7, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.State)))
	i += copy(dAtA[i:], m.State)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i += copy(dAtA[i:], m.Phase)
	return i, nil
}

func (m *RDS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RDS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObjectMeta.Size()))
	n8, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Spec.Size()))
	n9, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Status.Size()))
	n10, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *RDSList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RDSList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ListMeta.Size()))
	n11, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RDSOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RDSOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbInstanceAddress)))
	i += copy(dAtA[i:], m.ThisDbInstanceAddress)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbInstanceArn)))
	i += copy(dAtA[i:], m.ThisDbInstanceArn)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbInstanceAvailabilityZone)))
	i += copy(dAtA[i:], m.ThisDbInstanceAvailabilityZone)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbInstanceEndpoint)))
	i += copy(dAtA[i:], m.ThisDbInstanceEndpoint)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbInstanceHostedZoneID)))
	i += copy(dAtA[i:], m.ThisDbInstanceHostedZoneID)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbInstanceID)))
	i += copy(dAtA[i:], m.ThisDbInstanceID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbInstanceName)))
	i += copy(dAtA[i:], m.ThisDbInstanceName)
	dAtA[i] = 0x42
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbInstancePassword)))
	i += copy(dAtA[i:], m.ThisDbInstancePassword)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbInstancePort)))
	i += copy(dAtA[i:], m.ThisDbInstancePort)
	dAtA[i] = 0x52
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbInstanceResourceID)))
	i += copy(dAtA[i:], m.ThisDbInstanceResourceID)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbInstanceStatus)))
	i += copy(dAtA[i:], m.ThisDbInstanceStatus)
	dAtA[i] = 0x62
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbInstanceUsername)))
	i += copy(dAtA[i:], m.ThisDbInstanceUsername)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbOptionGroupArn)))
	i += copy(dAtA[i:], m.ThisDbOptionGroupArn)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbOptionGroupID)))
	i += copy(dAtA[i:], m.ThisDbOptionGroupID)
	dAtA[i] = 0x7a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbParameterGroupArn)))
	i += copy(dAtA[i:], m.ThisDbParameterGroupArn)
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbParameterGroupID)))
	i += copy(dAtA[i:], m.ThisDbParameterGroupID)
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbSubnetGroupArn)))
	i += copy(dAtA[i:], m.ThisDbSubnetGroupArn)
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ThisDbSubnetGroupID)))
	i += copy(dAtA[i:], m.ThisDbSubnetGroupID)
	return i, nil
}

func (m *RDSSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RDSSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SecretRef != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.SecretRef.Size()))
		n12, err := m.SecretRef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ProviderRef.Size()))
	n13, err := m.ProviderRef.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Source)))
	i += copy(dAtA[i:], m.Source)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AllocatedStorage)))
	i += copy(dAtA[i:], m.AllocatedStorage)
	dAtA[i] = 0x28
	i++
	if m.AllowMajorVersionUpgrade {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x30
	i++
	if m.ApplyImmediately {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x38
	i++
	if m.AutoMinorVersionUpgrade {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x42
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AvailabilityZone)))
	i += copy(dAtA[i:], m.AvailabilityZone)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BackupRetentionPeriod)))
	i += copy(dAtA[i:], m.BackupRetentionPeriod)
	dAtA[i] = 0x52
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BackupWindow)))
	i += copy(dAtA[i:], m.BackupWindow)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CharacterSetName)))
	i += copy(dAtA[i:], m.CharacterSetName)
	dAtA[i] = 0x60
	i++
	if m.CopyTagsToSnapshot {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x68
	i++
	if m.CreateDbInstance {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x70
	i++
	if m.CreateDbOptionGroup {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x78
	i++
	if m.CreateDbParameterGroup {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	if m.CreateDbSubnetGroup {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	if m.CreateMonitoringRole {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DbSubnetGroupName)))
	i += copy(dAtA[i:], m.DbSubnetGroupName)
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	if m.DeletionProtection {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.EnabledCloudwatchLogsExports) > 0 {
		for _, s := range m.EnabledCloudwatchLogsExports {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Engine)))
	i += copy(dAtA[i:], m.Engine)
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.EngineVersion)))
	i += copy(dAtA[i:], m.EngineVersion)
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Family)))
	i += copy(dAtA[i:], m.Family)
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FinalSnapshotIdentifier)))
	i += copy(dAtA[i:], m.FinalSnapshotIdentifier)
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	if m.IamDatabaseAuthenticationEnabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Identifier)))
	i += copy(dAtA[i:], m.Identifier)
	dAtA[i] = 0xda
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstanceClass)))
	i += copy(dAtA[i:], m.InstanceClass)
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Iops)))
	i += copy(dAtA[i:], m.Iops)
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KmsKeyID)))
	i += copy(dAtA[i:], m.KmsKeyID)
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LicenseModel)))
	i += copy(dAtA[i:], m.LicenseModel)
	dAtA[i] = 0xfa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MaintenanceWindow)))
	i += copy(dAtA[i:], m.MaintenanceWindow)
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MajorEngineVersion)))
	i += copy(dAtA[i:], m.MajorEngineVersion)
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MaxAllocatedStorage)))
	i += copy(dAtA[i:], m.MaxAllocatedStorage)
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MonitoringInterval)))
	i += copy(dAtA[i:], m.MonitoringInterval)
	dAtA[i] = 0x9a
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MonitoringRoleArn)))
	i += copy(dAtA[i:], m.MonitoringRoleArn)
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MonitoringRoleName)))
	i += copy(dAtA[i:], m.MonitoringRoleName)
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x2
	i++
	if m.MultiAz {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.OptionGroupDescription)))
	i += copy(dAtA[i:], m.OptionGroupDescription)
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.OptionGroupName)))
	i += copy(dAtA[i:], m.OptionGroupName)
	if m.Options != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Options)))
		i += copy(dAtA[i:], m.Options)
	}
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ParameterGroupDescription)))
	i += copy(dAtA[i:], m.ParameterGroupDescription)
	dAtA[i] = 0xda
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ParameterGroupName)))
	i += copy(dAtA[i:], m.ParameterGroupName)
	if m.Parameters != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Parameters)))
		i += copy(dAtA[i:], m.Parameters)
	}
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Password)))
	i += copy(dAtA[i:], m.Password)
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x2
	i++
	if m.PerformanceInsightsEnabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xfa
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PerformanceInsightsRetentionPeriod)))
	i += copy(dAtA[i:], m.PerformanceInsightsRetentionPeriod)
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Port)))
	i += copy(dAtA[i:], m.Port)
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x3
	i++
	if m.PubliclyAccessible {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ReplicateSourceDb)))
	i += copy(dAtA[i:], m.ReplicateSourceDb)
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x3
	i++
	if m.SkipFinalSnapshot {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SnapshotIdentifier)))
	i += copy(dAtA[i:], m.SnapshotIdentifier)
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x3
	i++
	if m.StorageEncrypted {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.StorageType)))
	i += copy(dAtA[i:], m.StorageType)
	if len(m.SubnetIDS) > 0 {
		for _, s := range m.SubnetIDS {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x3
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Tags) > 0 {
		keysForTags := make([]string, 0, len(m.Tags))
		for k := range m.Tags {
			keysForTags = append(keysForTags, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
		for _, k := range keysForTags {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x3
			i++
			v := m.Tags[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Timeouts) > 0 {
		keysForTimeouts := make([]string, 0, len(m.Timeouts))
		for k := range m.Timeouts {
			keysForTimeouts = append(keysForTimeouts, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTimeouts)
		for _, k := range keysForTimeouts {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x3
			i++
			v := m.Timeouts[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Timezone)))
	i += copy(dAtA[i:], m.Timezone)
	dAtA[i] = 0xd8
	i++
	dAtA[i] = 0x3
	i++
	if m.UseParameterGroupNamePrefix {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xe2
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Username)))
	i += copy(dAtA[i:], m.Username)
	if len(m.VpcSecurityGroupIDS) > 0 {
		for _, s := range m.VpcSecurityGroupIDS {
			dAtA[i] = 0xea
			i++
			dAtA[i] = 0x3
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RDSStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RDSStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	if m.Output != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Output.Size()))
		n14, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.State)))
	i += copy(dAtA[i:], m.State)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i += copy(dAtA[i:], m.Phase)
	return i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GoogleServiceAccount) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GoogleServiceAccountList) Size() (n int) {
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *GoogleServiceAccountOutput) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Emails)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.EmailsList)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IamEmail)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IamEmails)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IamEmailsList)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Key)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Keys)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ServiceAccount)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ServiceAccounts)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GoogleServiceAccountSpec) Size() (n int) {
	var l int
	_ = l
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.ProviderRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Source)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.BillingAccountID)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 2
	n += 2
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.OrgID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Prefix)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProjectID)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.ProjectRoles) > 0 {
		for _, s := range m.ProjectRoles {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *GoogleServiceAccountStatus) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.State)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RDS) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RDSList) Size() (n int) {
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *RDSOutput) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThisDbInstanceAddress)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbInstanceArn)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbInstanceAvailabilityZone)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbInstanceEndpoint)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbInstanceHostedZoneID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbInstanceID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbInstanceName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbInstancePassword)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbInstancePort)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbInstanceResourceID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbInstanceStatus)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbInstanceUsername)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbOptionGroupArn)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbOptionGroupID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbParameterGroupArn)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbParameterGroupID)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbSubnetGroupArn)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ThisDbSubnetGroupID)
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *RDSSpec) Size() (n int) {
	var l int
	_ = l
	if m.SecretRef != nil {
		l = m.SecretRef.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.ProviderRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Source)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AllocatedStorage)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 2
	n += 2
	l = len(m.AvailabilityZone)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.BackupRetentionPeriod)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.BackupWindow)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CharacterSetName)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 2
	n += 2
	n += 2
	n += 3
	n += 3
	l = len(m.DbSubnetGroupName)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	if len(m.EnabledCloudwatchLogsExports) > 0 {
		for _, s := range m.EnabledCloudwatchLogsExports {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.Engine)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.EngineVersion)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Family)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.FinalSnapshotIdentifier)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	l = len(m.Identifier)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.InstanceClass)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Iops)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.KmsKeyID)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.LicenseModel)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MaintenanceWindow)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MajorEngineVersion)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MaxAllocatedStorage)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MonitoringInterval)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MonitoringRoleArn)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MonitoringRoleName)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	l = len(m.Name)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.OptionGroupDescription)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.OptionGroupName)
	n += 2 + l + sovGenerated(uint64(l))
	if m.Options != nil {
		l = len(m.Options)
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.ParameterGroupDescription)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.ParameterGroupName)
	n += 2 + l + sovGenerated(uint64(l))
	if m.Parameters != nil {
		l = len(m.Parameters)
		n += 2 + l + sovGenerated(uint64(l))
	}
	l = len(m.Password)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	l = len(m.PerformanceInsightsRetentionPeriod)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.Port)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	l = len(m.ReplicateSourceDb)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	l = len(m.SnapshotIdentifier)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	l = len(m.StorageType)
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.SubnetIDS) > 0 {
		for _, s := range m.SubnetIDS {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.Timeouts) > 0 {
		for k, v := range m.Timeouts {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 2 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = len(m.Timezone)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	l = len(m.Username)
	n += 2 + l + sovGenerated(uint64(l))
	if len(m.VpcSecurityGroupIDS) > 0 {
		for _, s := range m.VpcSecurityGroupIDS {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *RDSStatus) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.State)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GoogleServiceAccount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoogleServiceAccount{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(this.ObjectMeta.String(), "ObjectMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "GoogleServiceAccountSpec", "GoogleServiceAccountSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "GoogleServiceAccountStatus", "GoogleServiceAccountStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoogleServiceAccountList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoogleServiceAccountList{`,
		`ListMeta:` + strings.Replace(strings.Replace(this.ListMeta.String(), "ListMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Items), "GoogleServiceAccount", "GoogleServiceAccount", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoogleServiceAccountOutput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoogleServiceAccountOutput{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Emails:` + fmt.Sprintf("%v", this.Emails) + `,`,
		`EmailsList:` + fmt.Sprintf("%v", this.EmailsList) + `,`,
		`IamEmail:` + fmt.Sprintf("%v", this.IamEmail) + `,`,
		`IamEmails:` + fmt.Sprintf("%v", this.IamEmails) + `,`,
		`IamEmailsList:` + fmt.Sprintf("%v", this.IamEmailsList) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Keys:` + fmt.Sprintf("%v", this.Keys) + `,`,
		`ServiceAccount:` + fmt.Sprintf("%v", this.ServiceAccount) + `,`,
		`ServiceAccounts:` + fmt.Sprintf("%v", this.ServiceAccounts) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoogleServiceAccountSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoogleServiceAccountSpec{`,
		`SecretRef:` + strings.Replace(fmt.Sprintf("%v", this.SecretRef), "LocalObjectReference", "k8s_io_api_core_v1.LocalObjectReference", 1) + `,`,
		`ProviderRef:` + strings.Replace(strings.Replace(this.ProviderRef.String(), "LocalObjectReference", "k8s_io_api_core_v1.LocalObjectReference", 1), `&`, ``, 1) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`BillingAccountID:` + fmt.Sprintf("%v", this.BillingAccountID) + `,`,
		`GenerateKeys:` + fmt.Sprintf("%v", this.GenerateKeys) + `,`,
		`GrantBillingRole:` + fmt.Sprintf("%v", this.GrantBillingRole) + `,`,
		`GrantXpnRoles:` + fmt.Sprintf("%v", this.GrantXpnRoles) + `,`,
		`Names:` + fmt.Sprintf("%v", this.Names) + `,`,
		`OrgID:` + fmt.Sprintf("%v", this.OrgID) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`ProjectID:` + fmt.Sprintf("%v", this.ProjectID) + `,`,
		`ProjectRoles:` + fmt.Sprintf("%v", this.ProjectRoles) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoogleServiceAccountStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoogleServiceAccountStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "GoogleServiceAccountOutput", "GoogleServiceAccountOutput", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RDS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RDS{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(this.ObjectMeta.String(), "ObjectMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "RDSSpec", "RDSSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "RDSStatus", "RDSStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RDSList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RDSList{`,
		`ListMeta:` + strings.Replace(strings.Replace(this.ListMeta.String(), "ListMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Items), "RDS", "RDS", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RDSOutput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RDSOutput{`,
		`ThisDbInstanceAddress:` + fmt.Sprintf("%v", this.ThisDbInstanceAddress) + `,`,
		`ThisDbInstanceArn:` + fmt.Sprintf("%v", this.ThisDbInstanceArn) + `,`,
		`ThisDbInstanceAvailabilityZone:` + fmt.Sprintf("%v", this.ThisDbInstanceAvailabilityZone) + `,`,
		`ThisDbInstanceEndpoint:` + fmt.Sprintf("%v", this.ThisDbInstanceEndpoint) + `,`,
		`ThisDbInstanceHostedZoneID:` + fmt.Sprintf("%v", this.ThisDbInstanceHostedZoneID) + `,`,
		`ThisDbInstanceID:` + fmt.Sprintf("%v", this.ThisDbInstanceID) + `,`,
		`ThisDbInstanceName:` + fmt.Sprintf("%v", this.ThisDbInstanceName) + `,`,
		`ThisDbInstancePassword:` + fmt.Sprintf("%v", this.ThisDbInstancePassword) + `,`,
		`ThisDbInstancePort:` + fmt.Sprintf("%v", this.ThisDbInstancePort) + `,`,
		`ThisDbInstanceResourceID:` + fmt.Sprintf("%v", this.ThisDbInstanceResourceID) + `,`,
		`ThisDbInstanceStatus:` + fmt.Sprintf("%v", this.ThisDbInstanceStatus) + `,`,
		`ThisDbInstanceUsername:` + fmt.Sprintf("%v", this.ThisDbInstanceUsername) + `,`,
		`ThisDbOptionGroupArn:` + fmt.Sprintf("%v", this.ThisDbOptionGroupArn) + `,`,
		`ThisDbOptionGroupID:` + fmt.Sprintf("%v", this.ThisDbOptionGroupID) + `,`,
		`ThisDbParameterGroupArn:` + fmt.Sprintf("%v", this.ThisDbParameterGroupArn) + `,`,
		`ThisDbParameterGroupID:` + fmt.Sprintf("%v", this.ThisDbParameterGroupID) + `,`,
		`ThisDbSubnetGroupArn:` + fmt.Sprintf("%v", this.ThisDbSubnetGroupArn) + `,`,
		`ThisDbSubnetGroupID:` + fmt.Sprintf("%v", this.ThisDbSubnetGroupID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RDSSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	keysForTimeouts := make([]string, 0, len(this.Timeouts))
	for k := range this.Timeouts {
		keysForTimeouts = append(keysForTimeouts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTimeouts)
	mapStringForTimeouts := "map[string]string{"
	for _, k := range keysForTimeouts {
		mapStringForTimeouts += fmt.Sprintf("%v: %v,", k, this.Timeouts[k])
	}
	mapStringForTimeouts += "}"
	s := strings.Join([]string{`&RDSSpec{`,
		`SecretRef:` + strings.Replace(fmt.Sprintf("%v", this.SecretRef), "LocalObjectReference", "k8s_io_api_core_v1.LocalObjectReference", 1) + `,`,
		`ProviderRef:` + strings.Replace(strings.Replace(this.ProviderRef.String(), "LocalObjectReference", "k8s_io_api_core_v1.LocalObjectReference", 1), `&`, ``, 1) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`AllocatedStorage:` + fmt.Sprintf("%v", this.AllocatedStorage) + `,`,
		`AllowMajorVersionUpgrade:` + fmt.Sprintf("%v", this.AllowMajorVersionUpgrade) + `,`,
		`ApplyImmediately:` + fmt.Sprintf("%v", this.ApplyImmediately) + `,`,
		`AutoMinorVersionUpgrade:` + fmt.Sprintf("%v", this.AutoMinorVersionUpgrade) + `,`,
		`AvailabilityZone:` + fmt.Sprintf("%v", this.AvailabilityZone) + `,`,
		`BackupRetentionPeriod:` + fmt.Sprintf("%v", this.BackupRetentionPeriod) + `,`,
		`BackupWindow:` + fmt.Sprintf("%v", this.BackupWindow) + `,`,
		`CharacterSetName:` + fmt.Sprintf("%v", this.CharacterSetName) + `,`,
		`CopyTagsToSnapshot:` + fmt.Sprintf("%v", this.CopyTagsToSnapshot) + `,`,
		`CreateDbInstance:` + fmt.Sprintf("%v", this.CreateDbInstance) + `,`,
		`CreateDbOptionGroup:` + fmt.Sprintf("%v", this.CreateDbOptionGroup) + `,`,
		`CreateDbParameterGroup:` + fmt.Sprintf("%v", this.CreateDbParameterGroup) + `,`,
		`CreateDbSubnetGroup:` + fmt.Sprintf("%v", this.CreateDbSubnetGroup) + `,`,
		`CreateMonitoringRole:` + fmt.Sprintf("%v", this.CreateMonitoringRole) + `,`,
		`DbSubnetGroupName:` + fmt.Sprintf("%v", this.DbSubnetGroupName) + `,`,
		`DeletionProtection:` + fmt.Sprintf("%v", this.DeletionProtection) + `,`,
		`EnabledCloudwatchLogsExports:` + fmt.Sprintf("%v", this.EnabledCloudwatchLogsExports) + `,`,
		`Engine:` + fmt.Sprintf("%v", this.Engine) + `,`,
		`EngineVersion:` + fmt.Sprintf("%v", this.EngineVersion) + `,`,
		`Family:` + fmt.Sprintf("%v", this.Family) + `,`,
		`FinalSnapshotIdentifier:` + fmt.Sprintf("%v", this.FinalSnapshotIdentifier) + `,`,
		`IamDatabaseAuthenticationEnabled:` + fmt.Sprintf("%v", this.IamDatabaseAuthenticationEnabled) + `,`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`InstanceClass:` + fmt.Sprintf("%v", this.InstanceClass) + `,`,
		`Iops:` + fmt.Sprintf("%v", this.Iops) + `,`,
		`KmsKeyID:` + fmt.Sprintf("%v", this.KmsKeyID) + `,`,
		`LicenseModel:` + fmt.Sprintf("%v", this.LicenseModel) + `,`,
		`MaintenanceWindow:` + fmt.Sprintf("%v", this.MaintenanceWindow) + `,`,
		`MajorEngineVersion:` + fmt.Sprintf("%v", this.MajorEngineVersion) + `,`,
		`MaxAllocatedStorage:` + fmt.Sprintf("%v", this.MaxAllocatedStorage) + `,`,
		`MonitoringInterval:` + fmt.Sprintf("%v", this.MonitoringInterval) + `,`,
		`MonitoringRoleArn:` + fmt.Sprintf("%v", this.MonitoringRoleArn) + `,`,
		`MonitoringRoleName:` + fmt.Sprintf("%v", this.MonitoringRoleName) + `,`,
		`MultiAz:` + fmt.Sprintf("%v", this.MultiAz) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`OptionGroupDescription:` + fmt.Sprintf("%v", this.OptionGroupDescription) + `,`,
		`OptionGroupName:` + fmt.Sprintf("%v", this.OptionGroupName) + `,`,
		`Options:` + valueToStringGenerated(this.Options) + `,`,
		`ParameterGroupDescription:` + fmt.Sprintf("%v", this.ParameterGroupDescription) + `,`,
		`ParameterGroupName:` + fmt.Sprintf("%v", this.ParameterGroupName) + `,`,
		`Parameters:` + valueToStringGenerated(this.Parameters) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`PerformanceInsightsEnabled:` + fmt.Sprintf("%v", this.PerformanceInsightsEnabled) + `,`,
		`PerformanceInsightsRetentionPeriod:` + fmt.Sprintf("%v", this.PerformanceInsightsRetentionPeriod) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`PubliclyAccessible:` + fmt.Sprintf("%v", this.PubliclyAccessible) + `,`,
		`ReplicateSourceDb:` + fmt.Sprintf("%v", this.ReplicateSourceDb) + `,`,
		`SkipFinalSnapshot:` + fmt.Sprintf("%v", this.SkipFinalSnapshot) + `,`,
		`SnapshotIdentifier:` + fmt.Sprintf("%v", this.SnapshotIdentifier) + `,`,
		`StorageEncrypted:` + fmt.Sprintf("%v", this.StorageEncrypted) + `,`,
		`StorageType:` + fmt.Sprintf("%v", this.StorageType) + `,`,
		`SubnetIDS:` + fmt.Sprintf("%v", this.SubnetIDS) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`Timeouts:` + mapStringForTimeouts + `,`,
		`Timezone:` + fmt.Sprintf("%v", this.Timezone) + `,`,
		`UseParameterGroupNamePrefix:` + fmt.Sprintf("%v", this.UseParameterGroupNamePrefix) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`VpcSecurityGroupIDS:` + fmt.Sprintf("%v", this.VpcSecurityGroupIDS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RDSStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RDSStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "RDSOutput", "RDSOutput", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GoogleServiceAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleServiceAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleServiceAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoogleServiceAccountList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleServiceAccountList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleServiceAccountList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, GoogleServiceAccount{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoogleServiceAccountOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleServiceAccountOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleServiceAccountOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailsList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailsList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IamEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IamEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IamEmails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IamEmails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IamEmailsList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IamEmailsList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccounts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoogleServiceAccountSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleServiceAccountSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleServiceAccountSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &k8s_io_api_core_v1.LocalObjectReference{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProviderRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingAccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BillingAccountID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenerateKeys", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GenerateKeys = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantBillingRole", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GrantBillingRole = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantXpnRoles", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GrantXpnRoles = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectRoles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectRoles = append(m.ProjectRoles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoogleServiceAccountStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleServiceAccountStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleServiceAccountStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &GoogleServiceAccountOutput{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = kubeform_dev_kubeform_apis_base_v1alpha1.Phase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RDS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RDS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RDS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RDSList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RDSList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RDSList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, RDS{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RDSOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RDSOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RDSOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbInstanceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbInstanceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbInstanceArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbInstanceArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbInstanceAvailabilityZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbInstanceAvailabilityZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbInstanceEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbInstanceEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbInstanceHostedZoneID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbInstanceHostedZoneID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbInstanceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbInstanceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbInstanceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbInstanceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbInstancePassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbInstancePassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbInstancePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbInstancePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbInstanceResourceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbInstanceResourceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbInstanceStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbInstanceStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbInstanceUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbInstanceUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbOptionGroupArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbOptionGroupArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbOptionGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbOptionGroupID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbParameterGroupArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbParameterGroupArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbParameterGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbParameterGroupID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbSubnetGroupArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbSubnetGroupArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisDbSubnetGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisDbSubnetGroupID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RDSSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RDSSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RDSSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretRef == nil {
				m.SecretRef = &k8s_io_api_core_v1.LocalObjectReference{}
			}
			if err := m.SecretRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProviderRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedStorage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocatedStorage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowMajorVersionUpgrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowMajorVersionUpgrade = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyImmediately", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApplyImmediately = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoMinorVersionUpgrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoMinorVersionUpgrade = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupRetentionPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupRetentionPeriod = encoding_json.Number(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupWindow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupWindow = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharacterSetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CharacterSetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyTagsToSnapshot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CopyTagsToSnapshot = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDbInstance", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateDbInstance = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDbOptionGroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateDbOptionGroup = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDbParameterGroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateDbParameterGroup = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDbSubnetGroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateDbSubnetGroup = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMonitoringRole", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateMonitoringRole = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbSubnetGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbSubnetGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletionProtection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeletionProtection = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledCloudwatchLogsExports", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnabledCloudwatchLogsExports = append(m.EnabledCloudwatchLogsExports, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Engine = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngineVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalSnapshotIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalSnapshotIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IamDatabaseAuthenticationEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IamDatabaseAuthenticationEnabled = bool(v != 0)
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iops", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iops = encoding_json.Number(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KmsKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KmsKeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenseModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintenanceWindow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaintenanceWindow = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorEngineVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MajorEngineVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedStorage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxAllocatedStorage = encoding_json.Number(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitoringInterval = encoding_json.Number(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringRoleArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitoringRoleArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoringRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitoringRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiAz", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MultiAz = bool(v != 0)
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionGroupDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionGroupDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options[:0], dAtA[iNdEx:postIndex]...)
			if m.Options == nil {
				m.Options = []byte{}
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParameterGroupDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParameterGroupDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParameterGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParameterGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters[:0], dAtA[iNdEx:postIndex]...)
			if m.Parameters == nil {
				m.Parameters = []byte{}
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceInsightsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PerformanceInsightsEnabled = bool(v != 0)
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceInsightsRetentionPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PerformanceInsightsRetentionPeriod = encoding_json.Number(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubliclyAccessible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PubliclyAccessible = bool(v != 0)
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicateSourceDb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicateSourceDb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipFinalSnapshot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipFinalSnapshot = bool(v != 0)
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageEncrypted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StorageEncrypted = bool(v != 0)
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetIDS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetIDS = append(m.SubnetIDS, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timeouts == nil {
				m.Timeouts = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Timeouts[mapkey] = mapvalue
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseParameterGroupNamePrefix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseParameterGroupNamePrefix = bool(v != 0)
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcSecurityGroupIDS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcSecurityGroupIDS = append(m.VpcSecurityGroupIDS, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RDSStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RDSStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RDSStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &RDSOutput{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = kubeform_dev_kubeform_apis_base_v1alpha1.Phase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("kubeform.dev/kubeform/apis/modules/v1alpha1/generated.proto", fileDescriptorGenerated)
}

var fileDescriptorGenerated = []byte{
	// 2725 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x59, 0x4b, 0x73, 0x1b, 0xc7,
	0xf1, 0x17, 0x5f, 0x12, 0x38, 0x24, 0xf5, 0x18, 0x51, 0xd2, 0x8a, 0x92, 0x41, 0x1a, 0xf6, 0xdf,
	0xa6, 0x5f, 0x80, 0x25, 0xcb, 0xb6, 0xfe, 0x56, 0xe2, 0x14, 0x40, 0xd0, 0x0c, 0x2c, 0xd3, 0x44,
	0x35, 0x40, 0x25, 0x71, 0xb9, 0x62, 0x0f, 0x16, 0x43, 0x70, 0xcd, 0xc5, 0xce, 0xd6, 0xce, 0x80,
	0x32, 0x7c, 0xca, 0x31, 0xc7, 0x54, 0xbe, 0x40, 0x3e, 0x42, 0x4e, 0xb9, 0xe6, 0xec, 0xa3, 0xe3,
	0x93, 0x4f, 0x2a, 0x9b, 0xf9, 0x16, 0xae, 0x4a, 0x55, 0x6a, 0x66, 0x67, 0x1f, 0xb3, 0x0f, 0xca,
	0xb4, 0x2b, 0xae, 0x54, 0xe5, 0x86, 0xed, 0xfe, 0xfd, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x06,
	0xe8, 0xc1, 0xd1, 0x64, 0x40, 0x0f, 0x58, 0x30, 0xae, 0x0f, 0xe9, 0x71, 0x23, 0xfa, 0x68, 0x10,
	0xdf, 0xe1, 0x8d, 0x31, 0x1b, 0x4e, 0x5c, 0xca, 0x1b, 0xc7, 0x77, 0x88, 0xeb, 0x1f, 0x92, 0x3b,
	0x8d, 0x11, 0xf5, 0x68, 0x40, 0x04, 0x1d, 0xd6, 0xfd, 0x80, 0x09, 0x86, 0x5f, 0x49, 0x93, 0xeb,
	0xf1, 0x87, 0x24, 0xd7, 0x35, 0xb9, 0x1e, 0x91, 0xd7, 0x5e, 0x1b, 0x39, 0xe2, 0x70, 0x32, 0xa8,
	0xdb, 0x6c, 0xdc, 0x18, 0xb1, 0x11, 0x6b, 0x28, 0x1b, 0x83, 0xc9, 0x81, 0xfa, 0x52, 0x1f, 0xea,
	0x57, 0x68, 0x7b, 0xad, 0x76, 0x74, 0x9f, 0xd7, 0x1d, 0x26, 0x3d, 0x69, 0xd8, 0x2c, 0xa0, 0x8d,
	0xe3, 0xdc, 0xf8, 0x6b, 0xf7, 0x12, 0xcc, 0x98, 0xd8, 0x87, 0x8e, 0x47, 0x83, 0x69, 0xc3, 0x3f,
	0x1a, 0x69, 0xf7, 0xa9, 0x20, 0x45, 0xac, 0x46, 0x19, 0x2b, 0x98, 0x78, 0xc2, 0x19, 0xd3, 0x1c,
	0xe1, 0xad, 0xa7, 0x11, 0xb8, 0x7d, 0x48, 0xc7, 0x24, 0xcb, 0xab, 0x7d, 0x3d, 0x8b, 0x56, 0x77,
	0x18, 0x1b, 0xb9, 0xb4, 0x47, 0x83, 0x63, 0xc7, 0xa6, 0x4d, 0xdb, 0x66, 0x13, 0x4f, 0xe0, 0x4f,
	0x51, 0x45, 0x3a, 0x37, 0x24, 0x82, 0x58, 0x33, 0x1b, 0x33, 0x9b, 0x4b, 0x77, 0x5f, 0xaf, 0x87,
	0x63, 0xd4, 0xd3, 0x63, 0xd4, 0xfd, 0xa3, 0x91, 0x0e, 0x26, 0x15, 0xa4, 0x7e, 0x7c, 0xa7, 0xbe,
	0x37, 0xf8, 0x8c, 0xda, 0x62, 0x97, 0x0a, 0xd2, 0xc2, 0x5f, 0x3e, 0x59, 0x3f, 0x77, 0xf2, 0x64,
	0x1d, 0x25, 0x32, 0x88, 0xad, 0xe2, 0x11, 0x9a, 0xe7, 0x3e, 0xb5, 0xad, 0x59, 0x65, 0x7d, 0xbb,
	0x7e, 0x86, 0x85, 0xaa, 0x17, 0xb9, 0xdc, 0xf3, 0xa9, 0xdd, 0x5a, 0xd6, 0x43, 0xce, 0xcb, 0x2f,
	0x50, 0x03, 0x60, 0x86, 0xce, 0x73, 0x41, 0xc4, 0x84, 0x5b, 0x73, 0x6a, 0xa8, 0x9d, 0x9f, 0x3e,
	0x94, 0x32, 0xd7, 0xba, 0xa8, 0x07, 0x3b, 0x1f, 0x7e, 0x83, 0x1e, 0xa6, 0xf6, 0xed, 0x0c, 0xb2,
	0x8a, 0x68, 0x1f, 0x38, 0x5c, 0xe0, 0x8f, 0x73, 0x81, 0xad, 0xff, 0xb0, 0xc0, 0x4a, 0xb6, 0x0a,
	0xeb, 0x65, 0x3d, 0x6c, 0x25, 0x92, 0xa4, 0x82, 0x7a, 0x80, 0x16, 0x1c, 0x41, 0xc7, 0xdc, 0x9a,
	0xdd, 0x98, 0xdb, 0x5c, 0xba, 0xdb, 0xfc, 0xc9, 0x53, 0x6d, 0xad, 0xe8, 0xd1, 0x16, 0x3a, 0xd2,
	0x2e, 0x84, 0xe6, 0x6b, 0xff, 0x9a, 0x43, 0x6b, 0x45, 0xf0, 0xbd, 0x89, 0xf0, 0x27, 0x02, 0x3f,
	0x87, 0x16, 0xe8, 0x98, 0x38, 0xae, 0x9a, 0xe1, 0x62, 0x62, 0x63, 0x5b, 0x0a, 0x21, 0xd4, 0xe1,
	0x17, 0xd0, 0x79, 0xf5, 0x83, 0xab, 0x14, 0x58, 0x4c, 0xc2, 0xa9, 0x50, 0x1c, 0xb4, 0x16, 0xdf,
	0x45, 0x28, 0xfc, 0x25, 0xe7, 0xab, 0xd6, 0x70, 0x31, 0x49, 0xad, 0xed, 0x58, 0x03, 0x29, 0x14,
	0x7e, 0x15, 0x55, 0x1c, 0x32, 0x56, 0x4a, 0x6b, 0x5e, 0x31, 0xe2, 0xa8, 0x75, 0xb4, 0x1c, 0x62,
	0x04, 0x6e, 0xa0, 0xc5, 0xe8, 0x37, 0xb7, 0x16, 0x14, 0xfc, 0x8a, 0x86, 0x2f, 0x46, 0x70, 0x0e,
	0x09, 0x06, 0x3f, 0x40, 0x2b, 0xf1, 0x87, 0xf2, 0xea, 0xbc, 0x22, 0x5d, 0xd3, 0xa4, 0x95, 0x4e,
	0x5a, 0x09, 0x26, 0x16, 0x3f, 0x83, 0xe6, 0x8e, 0xe8, 0xd4, 0xba, 0xa0, 0x28, 0x4b, 0x9a, 0x32,
	0xf7, 0x90, 0x4e, 0x41, 0xca, 0xf1, 0x06, 0x9a, 0x3f, 0xa2, 0x53, 0x6e, 0x55, 0x94, 0x3e, 0x4e,
	0xe8, 0x87, 0x74, 0xca, 0x41, 0x69, 0xf0, 0xbb, 0xe8, 0x22, 0x37, 0xa2, 0x6e, 0x2d, 0x2a, 0xec,
	0x75, 0x8d, 0xbd, 0x68, 0xae, 0x09, 0x64, 0xd0, 0xb8, 0x89, 0x2e, 0x99, 0x12, 0x6e, 0x21, 0x65,
	0xe0, 0x86, 0x36, 0x70, 0xc9, 0x34, 0xc0, 0x21, 0x8b, 0xaf, 0x7d, 0xbd, 0x50, 0x9c, 0xe2, 0x72,
	0xdb, 0xe1, 0x7d, 0xb4, 0xc8, 0xa9, 0x1d, 0x50, 0x01, 0xf4, 0x40, 0xe7, 0xf8, 0x66, 0x2a, 0xc7,
	0xeb, 0xb2, 0x56, 0xaa, 0x8c, 0x66, 0x36, 0x71, 0xc3, 0xda, 0x00, 0xf4, 0x80, 0x06, 0xd4, 0xb3,
	0x69, 0x6b, 0x45, 0x06, 0xbd, 0x17, 0xd1, 0x21, 0xb1, 0x84, 0x3f, 0x41, 0x4b, 0x7e, 0xc0, 0x8e,
	0x9d, 0x21, 0x0d, 0xa4, 0xe1, 0xd9, 0x33, 0x1a, 0xbe, 0xaa, 0x27, 0xb7, 0xd4, 0x4d, 0x8c, 0x40,
	0xda, 0xa2, 0x4c, 0x48, 0xce, 0x26, 0x81, 0x4d, 0x75, 0x92, 0x25, 0xfb, 0x5b, 0x49, 0x41, 0x6b,
	0x71, 0x1b, 0x5d, 0x1e, 0x38, 0xae, 0xeb, 0x78, 0x23, 0x3d, 0xeb, 0x4e, 0x5b, 0x27, 0x99, 0xa5,
	0x19, 0x97, 0x5b, 0x19, 0x3d, 0xe4, 0x18, 0xf8, 0x3e, 0x5a, 0x8e, 0xaa, 0xb1, 0x5c, 0x5b, 0x95,
	0x77, 0x95, 0xd6, 0xaa, 0xb6, 0xb0, 0xbc, 0x93, 0xd2, 0x81, 0x81, 0x94, 0xe3, 0x8f, 0x02, 0xe2,
	0x09, 0x3d, 0x08, 0x30, 0x97, 0xaa, 0x04, 0xac, 0x24, 0xe3, 0xef, 0x64, 0xf4, 0x90, 0x63, 0xc8,
	0x1c, 0x56, 0xb2, 0xdf, 0xfa, 0x9e, 0xfc, 0xe6, 0x2a, 0x21, 0x2b, 0x49, 0x0e, 0xef, 0xa4, 0x95,
	0x60, 0x62, 0xf1, 0x3a, 0x5a, 0xf0, 0xc8, 0x98, 0xca, 0x2c, 0x9d, 0xdb, 0x5c, 0x6c, 0x2d, 0xca,
	0xcd, 0xfd, 0xa1, 0x14, 0x40, 0x28, 0x97, 0x15, 0x80, 0x05, 0xa3, 0x4e, 0x5b, 0xa7, 0x66, 0x5c,
	0x01, 0xf6, 0xa4, 0x10, 0x42, 0x9d, 0x0c, 0xb8, 0x1f, 0xd0, 0x03, 0xe7, 0x73, 0x9d, 0x7f, 0x71,
	0xc0, 0xbb, 0x4a, 0x0a, 0x5a, 0x2b, 0xf7, 0xa7, 0x1f, 0x30, 0xb9, 0x9c, 0x9d, 0xb6, 0xb5, 0x64,
	0xee, 0xcf, 0x6e, 0xa4, 0x80, 0x04, 0x83, 0xef, 0xa1, 0x65, 0xfd, 0x11, 0x4e, 0x6d, 0x59, 0x79,
	0x79, 0x59, 0xc6, 0xb5, 0x9b, 0x92, 0x83, 0x81, 0xaa, 0xfd, 0x63, 0xb6, 0xb8, 0xa8, 0x85, 0xe5,
	0x1d, 0xbf, 0x8f, 0x30, 0x1b, 0xc8, 0x8d, 0x40, 0x87, 0x7a, 0x71, 0x1c, 0xe6, 0xa9, 0xfc, 0x9e,
	0x6b, 0xad, 0x69, 0x77, 0xf0, 0x5e, 0x0e, 0x01, 0x05, 0x2c, 0x7c, 0x84, 0xce, 0x33, 0x55, 0x2a,
	0x75, 0x1a, 0xff, 0xf4, 0x33, 0x29, 0xac, 0xbc, 0x2d, 0x24, 0xc3, 0x17, 0xfe, 0x06, 0x3d, 0x84,
	0x5c, 0x0b, 0x79, 0x32, 0x45, 0x69, 0x1d, 0xaf, 0x85, 0x9c, 0x17, 0x85, 0x50, 0x87, 0xf7, 0xd1,
	0x82, 0x7f, 0x48, 0x38, 0xd5, 0x99, 0xfc, 0xab, 0x08, 0xd4, 0x95, 0xc2, 0xef, 0x9f, 0xac, 0xd7,
	0x4f, 0xe9, 0xc2, 0x06, 0x84, 0xd3, 0xb8, 0x05, 0xab, 0x2b, 0x06, 0x84, 0xd6, 0x6a, 0x7f, 0x99,
	0x45, 0x73, 0xd0, 0xee, 0xfd, 0x0c, 0xfd, 0xc4, 0x23, 0xa3, 0x9f, 0xb8, 0x77, 0xa6, 0x80, 0x42,
	0xbb, 0x57, 0xda, 0x3e, 0xfc, 0x3e, 0xd3, 0x3e, 0xbc, 0x75, 0x66, 0xcb, 0xa7, 0x77, 0x0b, 0x7f,
	0x9f, 0x41, 0x17, 0xa0, 0xdd, 0xfb, 0x19, 0x9a, 0x83, 0x7d, 0xb3, 0x39, 0x78, 0xfd, 0xac, 0x13,
	0x29, 0xe9, 0x05, 0xfe, 0xb8, 0x8c, 0x16, 0xa1, 0xdd, 0xd3, 0x47, 0x7f, 0x0f, 0x5d, 0x13, 0x87,
	0x0e, 0x6f, 0x0f, 0x3a, 0x1e, 0x17, 0xc4, 0xb3, 0x69, 0x73, 0x38, 0x0c, 0x28, 0xe7, 0xba, 0x15,
	0x78, 0x46, 0x9b, 0xb8, 0xd6, 0x2f, 0x02, 0x41, 0x31, 0x17, 0xef, 0xa0, 0x2b, 0x19, 0x45, 0xe0,
	0xe9, 0xae, 0xe1, 0xa6, 0x36, 0x78, 0xa5, 0x9f, 0x05, 0x40, 0x9e, 0x83, 0x3d, 0x54, 0xcd, 0x08,
	0x8f, 0x89, 0xe3, 0x92, 0x81, 0xe3, 0x3a, 0x62, 0xfa, 0x11, 0xf3, 0xa2, 0x3d, 0xf2, 0x82, 0xb6,
	0x5a, 0xed, 0x9f, 0x8a, 0x86, 0xa7, 0x58, 0xc3, 0x8f, 0xd0, 0x75, 0x13, 0xb1, 0xed, 0x0d, 0x7d,
	0xe6, 0x78, 0x42, 0x6f, 0xb3, 0xaa, 0x1e, 0xe7, 0x7a, 0xbf, 0x10, 0x05, 0x25, 0x6c, 0x3c, 0x40,
	0x6b, 0xa6, 0xe6, 0xd7, 0x8c, 0x0b, 0x3a, 0x94, 0x63, 0x76, 0xda, 0xba, 0x85, 0xa9, 0x69, 0xdb,
	0x6b, 0xfd, 0x52, 0x24, 0x9c, 0x62, 0x45, 0x1e, 0x33, 0xa6, 0xb6, 0xd3, 0xd6, 0x7d, 0x4e, 0x7c,
	0xcc, 0xf4, 0x33, 0x7a, 0xc8, 0x31, 0x64, 0xd5, 0x34, 0x65, 0xf2, 0x98, 0xd0, 0xcd, 0x4f, 0x5c,
	0x35, 0xfb, 0x39, 0x04, 0x14, 0xb0, 0xf2, 0xd1, 0xec, 0x12, 0xce, 0x1f, 0xb3, 0x60, 0xa8, 0x9b,
	0xa5, 0x92, 0x68, 0x46, 0x28, 0x28, 0x61, 0xe7, 0x7d, 0xec, 0xb2, 0x20, 0x6a, 0xaa, 0x4a, 0x7c,
	0x94, 0x08, 0x28, 0x60, 0xe1, 0x8f, 0x91, 0x65, 0x4a, 0x81, 0x86, 0x6d, 0x43, 0xa7, 0xad, 0x4f,
	0xb9, 0x0d, 0x6d, 0xd1, 0xea, 0x97, 0xe0, 0xa0, 0xd4, 0x02, 0xee, 0xa2, 0x55, 0x53, 0x17, 0x16,
	0x13, 0x7d, 0x28, 0xde, 0xd6, 0x96, 0x57, 0xfb, 0x05, 0x18, 0x28, 0x64, 0xe6, 0x63, 0xba, 0xcf,
	0x69, 0x20, 0xcf, 0x70, 0x6b, 0xf9, 0xb4, 0x98, 0x46, 0x28, 0x28, 0x61, 0x27, 0x9e, 0xee, 0xf9,
	0xf2, 0xc4, 0xdb, 0x09, 0xd8, 0xc4, 0x97, 0xbb, 0x76, 0xa5, 0xc8, 0x53, 0x13, 0x03, 0x85, 0x4c,
	0xbc, 0x8b, 0xae, 0xe6, 0xe4, 0x9d, 0xb6, 0x75, 0x51, 0x19, 0xbc, 0xa5, 0x0d, 0x5e, 0xed, 0xe7,
	0x21, 0x50, 0xc4, 0xc3, 0xbf, 0x43, 0x37, 0x42, 0x71, 0x97, 0x04, 0x64, 0x4c, 0x05, 0x0d, 0x62,
	0x1f, 0x2f, 0x29, 0x93, 0xeb, 0xda, 0xe4, 0x8d, 0x7e, 0x31, 0x0c, 0xca, 0xf8, 0x49, 0x4c, 0x4d,
	0x55, 0xa7, 0x6d, 0x5d, 0x2e, 0x8a, 0x69, 0x16, 0x05, 0x25, 0xec, 0x24, 0xa6, 0xbd, 0xc9, 0xc0,
	0xa3, 0x22, 0xf6, 0xf7, 0x4a, 0x51, 0x4c, 0x4d, 0x0c, 0x14, 0x32, 0x93, 0x98, 0xa6, 0xe4, 0x9d,
	0xb6, 0x85, 0x8b, 0x62, 0x6a, 0x40, 0xa0, 0x88, 0x57, 0xfb, 0xdb, 0xf3, 0xea, 0x2c, 0xfb, 0x5f,
	0xb9, 0x05, 0x10, 0xd7, 0x65, 0x36, 0x11, 0x74, 0xd8, 0x13, 0x2c, 0x20, 0x23, 0x9a, 0xbd, 0x05,
	0x34, 0x33, 0x7a, 0xc8, 0x31, 0x64, 0xb9, 0x90, 0xb2, 0xc7, 0xbb, 0xe4, 0x33, 0x16, 0x3c, 0xa2,
	0x01, 0x77, 0x98, 0xb7, 0xef, 0x8f, 0x02, 0x32, 0xa4, 0xfa, 0x46, 0x10, 0x97, 0x8b, 0x66, 0x09,
	0x0e, 0x4a, 0x2d, 0x28, 0x1f, 0x7d, 0xdf, 0x9d, 0x76, 0xc6, 0x63, 0x3a, 0x74, 0x88, 0xa0, 0xee,
	0x34, 0x7b, 0x53, 0x68, 0x66, 0xf4, 0x90, 0x63, 0xc8, 0x9d, 0x42, 0x26, 0x82, 0xed, 0x3a, 0x5e,
	0xce, 0xc5, 0xf0, 0xce, 0x10, 0xef, 0x94, 0x66, 0x31, 0x0c, 0xca, 0xf8, 0xca, 0xc1, 0xec, 0x09,
	0x5c, 0xc9, 0x04, 0x31, 0x7b, 0xe6, 0xe6, 0x18, 0xf8, 0x08, 0x5d, 0x1b, 0x10, 0xfb, 0x68, 0xe2,
	0x03, 0x15, 0xd4, 0x93, 0x9b, 0xbc, 0x4b, 0x03, 0x87, 0x0d, 0x75, 0x09, 0x7f, 0x33, 0xea, 0x39,
	0x5a, 0x45, 0xa0, 0xef, 0x9f, 0xac, 0xaf, 0x52, 0xcf, 0x66, 0x43, 0xc7, 0x1b, 0x35, 0x3e, 0xe3,
	0xcc, 0xab, 0x7f, 0x38, 0x19, 0x0f, 0x68, 0x00, 0xc5, 0x36, 0xe5, 0xbd, 0x2d, 0x54, 0xfc, 0xc6,
	0xf1, 0x86, 0xec, 0xb1, 0x2e, 0xea, 0xf1, 0xbd, 0xad, 0x95, 0xd2, 0x81, 0x81, 0x94, 0x93, 0xb5,
	0x0f, 0x49, 0x40, 0x6c, 0x41, 0x83, 0x1e, 0x15, 0xea, 0x20, 0x5c, 0x32, 0x27, 0xbb, 0x95, 0xd1,
	0x43, 0x8e, 0x21, 0x0f, 0x2b, 0x9b, 0xf9, 0xd3, 0x3e, 0x19, 0xf1, 0x3e, 0xeb, 0x79, 0xc4, 0xe7,
	0x87, 0x4c, 0xa8, 0x62, 0x5d, 0x49, 0x0e, 0xab, 0xad, 0x1c, 0x02, 0x0a, 0x58, 0xca, 0xa3, 0x80,
	0x12, 0x41, 0x93, 0x02, 0xae, 0x0a, 0x74, 0x2a, 0x3f, 0xb6, 0x32, 0x7a, 0xc8, 0x31, 0x64, 0x11,
	0x89, 0x64, 0xa9, 0x12, 0xab, 0x0a, 0x73, 0x25, 0x29, 0x22, 0x5b, 0x79, 0x08, 0x14, 0xf1, 0x64,
	0xf5, 0x8c, 0xc4, 0x66, 0x05, 0x54, 0x75, 0xb9, 0x92, 0x54, 0xcf, 0xad, 0x42, 0x14, 0x94, 0xb0,
	0xd3, 0x6e, 0xa6, 0xaa, 0x96, 0x2a, 0xc9, 0x05, 0x6e, 0xa6, 0x20, 0x50, 0xc4, 0x93, 0xc5, 0x38,
	0x14, 0xef, 0x32, 0xcf, 0x11, 0x2c, 0x88, 0x6e, 0xe2, 0x57, 0x94, 0xbd, 0xb8, 0x18, 0x6f, 0x15,
	0x60, 0xa0, 0x90, 0x29, 0xbb, 0xdc, 0x61, 0x7a, 0x08, 0x95, 0x20, 0xd8, 0xec, 0x72, 0xdb, 0x59,
	0x00, 0xe4, 0x39, 0x32, 0x45, 0x86, 0xd4, 0xa5, 0x2a, 0x69, 0x03, 0x26, 0xa8, 0xad, 0x6e, 0xaa,
	0x57, 0xcd, 0x14, 0x69, 0xe7, 0x10, 0x50, 0xc0, 0xc2, 0x43, 0x74, 0x9b, 0x7a, 0x64, 0xe0, 0xd2,
	0xe1, 0x96, 0xcb, 0x26, 0xc3, 0xc7, 0x44, 0xd8, 0x87, 0x1f, 0xb0, 0x11, 0xdf, 0xfe, 0xdc, 0x67,
	0x81, 0xe0, 0xd6, 0xaa, 0xba, 0x5a, 0x6f, 0x9c, 0x3c, 0x59, 0xbf, 0xbd, 0x7d, 0x0a, 0x0e, 0x4e,
	0xb5, 0xa2, 0xde, 0x02, 0xbd, 0x91, 0xe3, 0x51, 0xeb, 0x5a, 0xe6, 0x2d, 0x50, 0x49, 0x41, 0x6b,
	0xf1, 0x03, 0xb4, 0x12, 0xfe, 0xd2, 0x75, 0xc4, 0xba, 0x6e, 0x3e, 0xbc, 0x6d, 0xa7, 0x95, 0x60,
	0x62, 0xe5, 0x20, 0x07, 0x64, 0xec, 0xb8, 0x53, 0xeb, 0x86, 0x39, 0xc8, 0x7b, 0x4a, 0x0a, 0x5a,
	0x2b, 0xeb, 0xdd, 0x81, 0xe3, 0x11, 0x37, 0xda, 0x26, 0x9d, 0xa1, 0x2c, 0x00, 0x07, 0x0e, 0x0d,
	0x2c, 0xcb, 0xec, 0x0c, 0xde, 0x2b, 0x86, 0x41, 0x19, 0x1f, 0x0b, 0xb4, 0xe1, 0x90, 0x71, 0x9b,
	0x08, 0x22, 0xef, 0xcc, 0xcd, 0x89, 0x38, 0x94, 0x2a, 0x5b, 0x3d, 0x0a, 0xe8, 0xf0, 0x59, 0x37,
	0xd5, 0x3a, 0x6d, 0xea, 0x31, 0x36, 0x3a, 0x4f, 0xc1, 0xc3, 0x53, 0x2d, 0xe2, 0xbb, 0x08, 0x39,
	0xc9, 0x1c, 0xd6, 0xcc, 0x17, 0xd4, 0x94, 0xdb, 0x29, 0x94, 0x7a, 0xe2, 0xd4, 0x1b, 0x7c, 0xcb,
	0x25, 0x9c, 0x5b, 0xb7, 0x32, 0x4f, 0x9c, 0x69, 0x25, 0x98, 0x58, 0x7c, 0x1f, 0xcd, 0x3b, 0xcc,
	0xe7, 0xd6, 0x6d, 0xc5, 0x79, 0x3e, 0xba, 0x55, 0x77, 0x98, 0xcf, 0x4b, 0xcb, 0xad, 0x62, 0xe0,
	0x57, 0x51, 0xe5, 0x68, 0xcc, 0x1f, 0xd2, 0x69, 0xa7, 0x6d, 0x3d, 0x63, 0x3e, 0xdc, 0x3e, 0xd4,
	0x72, 0x88, 0x11, 0xb2, 0x16, 0xbb, 0x8e, 0x4d, 0x3d, 0x4e, 0x77, 0xd9, 0x90, 0xba, 0x56, 0xd5,
	0xac, 0xc5, 0x1f, 0xa4, 0x74, 0x60, 0x20, 0xe5, 0x5e, 0x1b, 0x13, 0xc7, 0x13, 0xd4, 0x93, 0x5e,
	0xeb, 0x52, 0xbe, 0x6e, 0xee, 0xb5, 0xdd, 0x2c, 0x00, 0xf2, 0x1c, 0xb9, 0xd7, 0xc6, 0xf2, 0xe4,
	0x35, 0x32, 0xcf, 0xda, 0x30, 0xef, 0x0e, 0xbb, 0x39, 0x04, 0x14, 0xb0, 0x30, 0x45, 0x57, 0xc7,
	0xe4, 0xf3, 0x6c, 0xd7, 0x60, 0x3d, 0xab, 0x8c, 0xbd, 0x11, 0x55, 0xa8, 0xdd, 0x3c, 0xa4, 0x34,
	0xa8, 0x45, 0xf6, 0xf0, 0x00, 0xe1, 0x71, 0x5c, 0x79, 0x3a, 0x9e, 0xa0, 0xc1, 0x31, 0x71, 0xad,
	0x9a, 0x1a, 0xe5, 0x6e, 0xec, 0x72, 0x0e, 0x51, 0x3a, 0x48, 0x81, 0x35, 0x15, 0x5f, 0xa3, 0xba,
	0xc9, 0x3e, 0xf5, 0xb9, 0x4c, 0x7c, 0xb3, 0x00, 0xc8, 0x73, 0x54, 0x7c, 0x0d, 0xa1, 0xaa, 0x8a,
	0xcf, 0x67, 0xe2, 0x9b, 0x43, 0x40, 0x01, 0x0b, 0xbf, 0x84, 0x2e, 0x8c, 0x27, 0xae, 0x70, 0x9a,
	0x5f, 0x58, 0xff, 0xa7, 0x36, 0xd9, 0x25, 0x6d, 0xe0, 0xc2, 0x6e, 0x28, 0x86, 0x48, 0x8f, 0x37,
	0xd0, 0xbc, 0xba, 0x04, 0xbd, 0x60, 0xbe, 0xc2, 0x2b, 0xd3, 0x4a, 0x23, 0x8f, 0x29, 0x96, 0x9c,
	0x5a, 0x6d, 0xca, 0xed, 0xc0, 0x51, 0xdf, 0xd6, 0x8b, 0x66, 0x93, 0xbf, 0x57, 0x88, 0x82, 0x12,
	0x36, 0x6e, 0xa2, 0x4b, 0x29, 0x8d, 0x9a, 0xed, 0xa6, 0xf9, 0x3a, 0xbf, 0x67, 0xaa, 0x21, 0x8b,
	0xc7, 0x4d, 0x74, 0x21, 0x14, 0x71, 0xeb, 0xa5, 0x8d, 0x99, 0xcd, 0xe5, 0xd6, 0x8b, 0x72, 0x8e,
	0x21, 0x4d, 0x6e, 0x40, 0xcb, 0x5c, 0x46, 0x20, 0x8f, 0x77, 0x29, 0xe7, 0xb2, 0x41, 0x8d, 0x78,
	0xf8, 0x13, 0x74, 0xd3, 0x37, 0x8e, 0xcf, 0xf4, 0x04, 0x5f, 0x56, 0xfe, 0x3c, 0xab, 0xfd, 0xb9,
	0xd9, 0x2d, 0x03, 0x42, 0xb9, 0x0d, 0xb9, 0xae, 0xa6, 0x52, 0xcd, 0xf4, 0x15, 0x73, 0x5d, 0xbb,
	0x39, 0x04, 0x14, 0xb0, 0xf0, 0xfb, 0x08, 0xc5, 0x52, 0x6e, 0xbd, 0xaa, 0xa6, 0xfc, 0xb2, 0xac,
	0x6d, 0x31, 0xff, 0xf4, 0x59, 0xa7, 0xd8, 0xb2, 0x00, 0xf9, 0xd1, 0xab, 0xc2, 0x6b, 0x66, 0x01,
	0x8a, 0xdf, 0x11, 0x62, 0x04, 0x1e, 0xa0, 0x35, 0x9f, 0x06, 0x07, 0x2c, 0x18, 0xab, 0xe7, 0x0e,
	0x8f, 0x3b, 0xa3, 0x43, 0xc1, 0xa3, 0x4a, 0x5e, 0x57, 0x49, 0x16, 0xbf, 0xc3, 0x74, 0x4b, 0x91,
	0x70, 0x8a, 0x15, 0xfc, 0xe7, 0x19, 0x54, 0x2b, 0x50, 0x67, 0x7b, 0xdd, 0x86, 0x72, 0xb6, 0xa5,
	0x07, 0xab, 0x75, 0x9f, 0xca, 0x28, 0xdd, 0xcf, 0x3f, 0x60, 0x34, 0xb9, 0x3f, 0xe4, 0xc9, 0x6d,
	0xbd, 0x6e, 0xee, 0x0f, 0xf5, 0x2c, 0xa2, 0x34, 0x6a, 0x81, 0x27, 0x03, 0xd7, 0xb1, 0xdd, 0x69,
	0xd3, 0xb6, 0x29, 0xe7, 0xce, 0xc0, 0xa5, 0xd6, 0x1d, 0xb3, 0x09, 0xe9, 0xe6, 0x10, 0x50, 0xc0,
	0x92, 0xd5, 0x24, 0xa0, 0xbe, 0x2b, 0x8f, 0x35, 0x1a, 0x5e, 0xc3, 0xda, 0x03, 0xeb, 0xae, 0x59,
	0x4d, 0x20, 0x0b, 0x80, 0x3c, 0x47, 0x1a, 0xe2, 0x47, 0x8e, 0x6f, 0x9c, 0xdb, 0xd6, 0x1b, 0xca,
	0xa7, 0xd8, 0x50, 0x2f, 0x0b, 0x80, 0x3c, 0x47, 0xce, 0x8e, 0xe7, 0xdb, 0x83, 0x7b, 0x66, 0xfa,
	0x16, 0x74, 0x06, 0x05, 0x2c, 0xd9, 0x85, 0xf3, 0xb0, 0x34, 0x6f, 0x7b, 0x76, 0x30, 0xf5, 0x05,
	0x1d, 0x5a, 0x6f, 0x9a, 0x5d, 0x78, 0x2f, 0xa3, 0x87, 0x1c, 0x03, 0xbf, 0x89, 0x96, 0xb4, 0xac,
	0x3f, 0xf5, 0xa9, 0xf5, 0x96, 0x72, 0x25, 0xbe, 0xee, 0xf6, 0x12, 0x15, 0xa4, 0x71, 0xf8, 0x15,
	0xb4, 0xc8, 0x55, 0xfb, 0xd8, 0x69, 0xf7, 0xac, 0xb7, 0x55, 0x33, 0x17, 0x5e, 0xbe, 0x23, 0x21,
	0x24, 0x7a, 0xfc, 0x29, 0x9a, 0x17, 0x64, 0xc4, 0xad, 0xfb, 0xea, 0x01, 0xf9, 0xdd, 0x1f, 0xf3,
	0xc6, 0x5e, 0x97, 0x57, 0x90, 0x6d, 0x4f, 0x04, 0xd3, 0x24, 0x6b, 0xa4, 0x08, 0x94, 0x65, 0xec,
	0xa3, 0x8a, 0x70, 0xc6, 0x94, 0x4d, 0x04, 0xb7, 0xfe, 0x5f, 0x8d, 0xd2, 0xfa, 0x71, 0xa3, 0x68,
	0x23, 0xe1, 0x48, 0xf1, 0x16, 0x8e, 0xc4, 0x10, 0x8f, 0x22, 0x37, 0xbc, 0xfc, 0xfd, 0x85, 0xbc,
	0x7a, 0xbe, 0x63, 0x6e, 0xf8, 0xbe, 0x96, 0x43, 0x8c, 0xc0, 0x14, 0xdd, 0x9a, 0x70, 0x9a, 0xaf,
	0x4b, 0xe1, 0x3f, 0x56, 0xd6, 0x03, 0xb5, 0x6c, 0xcf, 0x69, 0x03, 0xb7, 0xf6, 0xcb, 0xa1, 0x70,
	0x9a, 0x1d, 0xe9, 0xd4, 0x24, 0x7a, 0x87, 0xfb, 0x85, 0xe9, 0x54, 0xfc, 0xf2, 0x16, 0x23, 0x70,
	0x07, 0x5d, 0x3d, 0xf6, 0xed, 0x1e, 0xb5, 0x27, 0x81, 0x23, 0xa6, 0xfa, 0x31, 0xa6, 0x67, 0xfd,
	0x52, 0xad, 0xe6, 0x0d, 0xd9, 0x33, 0x3c, 0xca, 0xab, 0xa1, 0x88, 0xb3, 0xf6, 0x36, 0x5a, 0x8c,
	0x17, 0x08, 0x5f, 0x0e, 0xff, 0xa9, 0x56, 0x2f, 0xf7, 0xe1, 0x9f, 0xd3, 0xab, 0x68, 0xe1, 0x98,
	0xb8, 0x13, 0x1a, 0x3e, 0xbe, 0x43, 0xf8, 0xf1, 0xce, 0xec, 0xfd, 0x99, 0xb5, 0x07, 0x68, 0xc5,
	0x88, 0xf9, 0x59, 0xc8, 0xb5, 0xbf, 0xce, 0xaa, 0xbf, 0x10, 0xfe, 0x03, 0x7f, 0xb4, 0x7d, 0x94,
	0xf9, 0xa3, 0xed, 0xcc, 0xff, 0xde, 0xfc, 0x77, 0xfe, 0xaf, 0xd6, 0xaa, 0x7f, 0xf9, 0x5d, 0xf5,
	0xdc, 0x57, 0xdf, 0x55, 0xcf, 0x7d, 0xf3, 0x5d, 0xf5, 0xdc, 0x1f, 0x4e, 0xaa, 0x33, 0x5f, 0x9e,
	0x54, 0x67, 0xbe, 0x3a, 0xa9, 0xce, 0x7c, 0x73, 0x52, 0x9d, 0xf9, 0xf6, 0xa4, 0x3a, 0xf3, 0xa7,
	0x7f, 0x56, 0xcf, 0x7d, 0x54, 0x89, 0xc8, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xad, 0xe2,
	0x97, 0x45, 0x25, 0x00, 0x00,
}
